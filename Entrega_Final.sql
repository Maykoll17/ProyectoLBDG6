--===============================================================================
-- Renombrar tablas y atributos en la base de datos con el 
-- prefijo FIDE_ y sufijo _TB para estandarización y mejora de la nomenclatura
--===============================================================================


-- Tabla de Roles
ALTER TABLE roles RENAME TO FIDE_ROLES_TB;
ALTER TABLE FIDE_ROLES_TB RENAME COLUMN id TO FIDE_ROL_ID;
ALTER TABLE FIDE_ROLES_TB RENAME COLUMN nombre TO FIDE_NOMBRE_ROL;
-- Tabla de Usuarios
ALTER TABLE usuarios RENAME TO FIDE_USUARIOS_TB;
ALTER TABLE FIDE_USUARIOS_TB RENAME COLUMN id TO FIDE_USUARIO_ID;
ALTER TABLE FIDE_USUARIOS_TB RENAME COLUMN nombre_usuario TO FIDE_NOMBRE_USUARIO;
ALTER TABLE FIDE_USUARIOS_TB RENAME COLUMN contrasena TO FIDE_CONTRASENA;
ALTER TABLE FIDE_USUARIOS_TB RENAME COLUMN rol_id TO FIDE_ROL_ID;
-- Tabla de Tipos de Empleados
ALTER TABLE tipos_empleados RENAME TO FIDE_TIPOS_EMPLEADOS_TB;
ALTER TABLE FIDE_TIPOS_EMPLEADOS_TB RENAME COLUMN id TO FIDE_TIPO_EMPLEADO_ID;
ALTER TABLE FIDE_TIPOS_EMPLEADOS_TB RENAME COLUMN tipo TO
FIDE_DESCRIPCION_TIPO_EMPLEADO;
-- Tabla de Empleados
ALTER TABLE empleados RENAME TO FIDE_EMPLEADOS_TB;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN cedula TO FIDE_EMPLEADO_CEDULA;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN nombre TO FIDE_NOMBRE_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN apellidos TO FIDE_APELLIDOS_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN telefono TO FIDE_TELEFONO_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN direccion TO FIDE_DIRECCION_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN correo TO FIDE_CORREO_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN tipo_empleado_id TO FIDE_TIPO_EMPLEADO_ID;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN estado TO FIDE_ESTADO_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN salario_por_hora TO FIDE_SALARIO_HORA;
-- Tabla de Estados de Pacientes
ALTER TABLE estados_pacientes RENAME TO FIDE_ESTADOS_PACIENTES_TB;
ALTER TABLE FIDE_ESTADOS_PACIENTES_TB RENAME COLUMN id TO FIDE_ESTADO_PACIENTE_ID;
ALTER TABLE FIDE_ESTADOS_PACIENTES_TB RENAME COLUMN estado TO
FIDE_DESCRIPCION_ESTADO_PACIENTE;
-- Tabla de Pacientes
ALTER TABLE pacientes RENAME TO FIDE_PACIENTES_TB;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN cedula TO FIDE_PACIENTE_CEDULA;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN nombre TO FIDE_NOMBRE_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN apellidos TO FIDE_APELLIDOS_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN telefono TO FIDE_TELEFONO_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN direccion TO FIDE_DIRECCION_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN correo TO FIDE_CORREO_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN estado_paciente_id TO FIDE_ESTADO_PACIENTE_ID;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN deuda TO FIDE_DEUDA_PACIENTE;
-- Tabla de Citas
ALTER TABLE citas RENAME TO FIDE_CITAS_TB;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN id TO FIDE_CITA_ID;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN cedula_paciente TO FIDE_PACIENTE_CEDULA;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN cedula_empleado TO FIDE_EMPLEADO_CEDULA;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN fecha TO FIDE_FECHA_CITA;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN sala_id TO FIDE_SALA_ID;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN motivo TO FIDE_MOTIVO_CITA;
-- Tabla de Salas
ALTER TABLE salas RENAME TO FIDE_SALAS_TB;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN id TO FIDE_SALA_ID;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN capacidad TO FIDE_CAPACIDAD_SALA;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN tipo_sala_id TO FIDE_TIPO_SALA_ID;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN estado_sala_id TO FIDE_ESTADO_SALA_ID;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN precio_por_hora TO FIDE_PRECIO_HORA_SALA;
-- Tabla de Alquileres
ALTER TABLE alquileres RENAME TO FIDE_ALQUILERES_TB;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN id TO FIDE_ALQUILER_ID;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN sala_id TO FIDE_SALA_ID;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN doctor TO FIDE_DOCTOR_ALQUILER;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN fecha_inicio TO FIDE_FECHA_INICIO_ALQUILER;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN fecha_fin TO FIDE_FECHA_FIN_ALQUILER;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN total TO FIDE_TOTAL_ALQUILER;
-- Tabla de Medicamentos
ALTER TABLE medicamentos RENAME TO FIDE_MEDICAMENTOS_TB;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN id TO FIDE_MEDICAMENTO_ID;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN nombre TO FIDE_NOMBRE_MEDICAMENTO;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN precio TO FIDE_PRECIO_MEDICAMENTO;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN cantidad TO FIDE_CANTIDAD_MEDICAMENTO;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN informacion TO
FIDE_INFORMACION_MEDICAMENTO;
-- Tabla de Medicamentos Reservados
ALTER TABLE medicamentos_reservados RENAME TO FIDE_MEDICAMENTOS_RESERVADOS_TB;
ALTER TABLE FIDE_MEDICAMENTOS_RESERVADOS_TB RENAME COLUMN id TO FIDE_RESERVA_ID;
ALTER TABLE FIDE_MEDICAMENTOS_RESERVADOS_TB RENAME COLUMN cedula_paciente TO
FIDE_PACIENTE_CEDULA;
ALTER TABLE FIDE_MEDICAMENTOS_RESERVADOS_TB RENAME COLUMN medicamento_id TO
FIDE_MEDICAMENTO_ID;
ALTER TABLE FIDE_MEDICAMENTOS_RESERVADOS_TB RENAME COLUMN cantidad TO
FIDE_CANTIDAD_MEDICAMENTO;
-- Tabla de Facturas
ALTER TABLE facturas RENAME TO FIDE_FACTURAS_TB;
ALTER TABLE FIDE_FACTURAS_TB RENAME COLUMN id TO FIDE_FACTURA_ID;
ALTER TABLE FIDE_FACTURAS_TB RENAME COLUMN cedula_paciente TO FIDE_PACIENTE_CEDULA;
ALTER TABLE FIDE_FACTURAS_TB RENAME COLUMN estado TO FIDE_ESTADO_FACTURA;
ALTER TABLE FIDE_FACTURAS_TB RENAME COLUMN total TO FIDE_TOTAL_FACTURA;
-- Tabla de Detalles de Facturas
ALTER TABLE detalles_facturas RENAME TO FIDE_DETALLES_FACTURAS_TB;
ALTER TABLE FIDE_DETALLES_FACTURAS_TB RENAME COLUMN id TO FIDE_DETALLE_FACTURA_ID;
ALTER TABLE FIDE_DETALLES_FACTURAS_TB RENAME COLUMN factura_id TO FIDE_FACTURA_ID;
ALTER TABLE FIDE_DETALLES_FACTURAS_TB RENAME COLUMN descripcion TO FIDE_DESCRIPCION_FACTURA;
ALTER TABLE FIDE_DETALLES_FACTURAS_TB RENAME COLUMN monto TO FIDE_MONTO_FACTURA;

--Aca tambien modificamos el trigger y la Secuencia necesarias para la tabla Citas
-- Eliminar Secuencia Existente
DROP SEQUENCE seq_citas;
-- Eliminar Trigger Existente
DROP TRIGGER trg_citas;

-- Crear Secuencia con el nuevo prefijo y nomenclatura
CREATE SEQUENCE FIDE_SEQ_CITAS START WITH 1 INCREMENT BY 1;

-- Crear Trigger con el nuevo prefijo y nomenclatura
CREATE OR REPLACE TRIGGER FIDE_TRG_CITAS
BEFORE INSERT ON FIDE_CITAS_TB
FOR EACH ROW
BEGIN
    SELECT FIDE_SEQ_CITAS.NEXTVAL INTO :NEW.FIDE_CITA_ID FROM DUAL;
END;
/

-- ==============================================
-- ==============================================
-- ==============================================
-- NUEVAS TABLAS PARA LOS NUEVOS PAQUETES Y PROCEDIMIENTOS
--===============================================
-- ==============================================
-- ==============================================

-- 1. Historial Médico
CREATE TABLE FIDE_HISTORIAL_MEDICO_TB (
    FIDE_HISTORIAL_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_PACIENTE_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_EMPLEADO_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_FECHA_REGISTRO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_DIAGNOSTICO VARCHAR2(1000) NOT NULL,
    FIDE_TRATAMIENTO VARCHAR2(1000),
    FIDE_OBSERVACIONES VARCHAR2(2000),
    CONSTRAINT fk_historial_paciente FOREIGN KEY (FIDE_PACIENTE_CEDULA) REFERENCES FIDE_PACIENTES_TB(FIDE_PACIENTE_CEDULA),
    CONSTRAINT fk_historial_empleado FOREIGN KEY (FIDE_EMPLEADO_CEDULA) REFERENCES FIDE_EMPLEADOS_TB(FIDE_EMPLEADO_CEDULA)
);

-- 2. Hospitalizaciones
CREATE TABLE FIDE_HOSPITALIZACIONES_TB (
    FIDE_HOSPITALIZACION_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_PACIENTE_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_SALA_ID NUMBER NOT NULL,
    FIDE_EMPLEADO_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_FECHA_INGRESO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_FECHA_ALTA TIMESTAMP,
    FIDE_MOTIVO_INGRESO VARCHAR2(500) NOT NULL,
    FIDE_DIAGNOSTICO_INGRESO VARCHAR2(500) NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    CONSTRAINT fk_hosp_paciente FOREIGN KEY (FIDE_PACIENTE_CEDULA) REFERENCES FIDE_PACIENTES_TB(FIDE_PACIENTE_CEDULA),
    CONSTRAINT fk_hosp_sala FOREIGN KEY (FIDE_SALA_ID) REFERENCES FIDE_SALAS_TB(FIDE_SALA_ID),
    CONSTRAINT fk_hosp_empleado FOREIGN KEY (FIDE_EMPLEADO_CEDULA) REFERENCES FIDE_EMPLEADOS_TB(FIDE_EMPLEADO_CEDULA)
);

-- 3. Logs de acceso
CREATE TABLE FIDE_LOGS_ACCESO_TB (
    FIDE_LOG_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_USUARIO_ID NUMBER,
    FIDE_FECHA_ACCESO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_IP_ACCESO VARCHAR2(50),
    FIDE_ACCION VARCHAR2(100) NOT NULL,
    FIDE_RESULTADO VARCHAR2(20) NOT NULL,
    CONSTRAINT fk_log_usuario FOREIGN KEY (FIDE_USUARIO_ID) REFERENCES FIDE_USUARIOS_TB(FIDE_USUARIO_ID)
);

-- 4. Tokens de seguridad
CREATE TABLE FIDE_TOKENS_SEGURIDAD_TB (
    FIDE_TOKEN_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_USUARIO_ID NUMBER NOT NULL,
    FIDE_TOKEN VARCHAR2(255) NOT NULL,
    FIDE_FECHA_CREACION TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_FECHA_EXPIRACION TIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    CONSTRAINT fk_token_usuario FOREIGN KEY (FIDE_USUARIO_ID) REFERENCES FIDE_USUARIOS_TB(FIDE_USUARIO_ID)
);

-- 5. Permisos y roles-permisos
CREATE TABLE FIDE_PERMISOS_TB (
    FIDE_PERMISO_ID NUMBER PRIMARY KEY,
    FIDE_NOMBRE_PERMISO VARCHAR2(50) UNIQUE NOT NULL,
    FIDE_DESCRIPCION_PERMISO VARCHAR2(200)
);

CREATE TABLE FIDE_ROLES_PERMISOS_TB (
    FIDE_ROL_ID NUMBER,
    FIDE_PERMISO_ID NUMBER,
    PRIMARY KEY (FIDE_ROL_ID, FIDE_PERMISO_ID),
    CONSTRAINT fk_rol_permiso_rol FOREIGN KEY (FIDE_ROL_ID) REFERENCES FIDE_ROLES_TB(FIDE_ROL_ID),
    CONSTRAINT fk_rol_permiso_permiso FOREIGN KEY (FIDE_PERMISO_ID) REFERENCES FIDE_PERMISOS_TB(FIDE_PERMISO_ID)
);

-- 6. Notificaciones
CREATE TABLE FIDE_NOTIFICACIONES_TB (
    FIDE_NOTIFICACION_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_TIPO_NOTIFICACION VARCHAR2(50) NOT NULL,
    FIDE_DESTINATARIO VARCHAR2(200) NOT NULL,
    FIDE_ASUNTO VARCHAR2(200) NOT NULL,
    FIDE_CUERPO VARCHAR2(4000) NOT NULL,
    FIDE_FECHA_ENVIO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'PENDIENTE' NOT NULL
);

-- 7. Recibos
CREATE TABLE FIDE_RECIBOS_TB (
    FIDE_RECIBO_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_FACTURA_ID NUMBER NOT NULL,
    FIDE_FECHA_PAGO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_METODO_PAGO VARCHAR2(50) NOT NULL,
    FIDE_MONTO_PAGADO NUMBER(12,2) NOT NULL,
    FIDE_REFERENCIA_PAGO VARCHAR2(100),
    CONSTRAINT fk_recibo_factura FOREIGN KEY (FIDE_FACTURA_ID) REFERENCES FIDE_FACTURAS_TB(FIDE_FACTURA_ID)
);

-- 8. Actualización de usuarios para manejar bloqueo
ALTER TABLE FIDE_USUARIOS_TB ADD (
    FIDE_ESTADO_USUARIO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    FIDE_INTENTOS_FALLIDOS NUMBER DEFAULT 0,
    FIDE_ULTIMA_CONEXION TIMESTAMP
);

-- 9. Descuentos para facturación
CREATE TABLE FIDE_DESCUENTOS_TB (
    FIDE_DESCUENTO_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_CODIGO_DESCUENTO VARCHAR2(20) UNIQUE NOT NULL,
    FIDE_PORCENTAJE_DESCUENTO NUMBER(5,2) NOT NULL,
    FIDE_FECHA_INICIO TIMESTAMP NOT NULL,
    FIDE_FECHA_FIN TIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL
);

-- Actualización en facturas para soportar descuentos
ALTER TABLE FIDE_FACTURAS_TB ADD (
    FIDE_DESCUENTO_ID NUMBER,
    FIDE_PORCENTAJE_APLICADO NUMBER(5,2) DEFAULT 0,
    CONSTRAINT fk_factura_descuento FOREIGN KEY (FIDE_DESCUENTO_ID) REFERENCES FIDE_DESCUENTOS_TB(FIDE_DESCUENTO_ID)
);

--================================================
--================================================
-- Nuevas tablas
--================================================
--================================================

--Tabla para historial médico:

CREATE TABLE FIDE_HISTORIAL_MEDICO_TB (
    FIDE_HISTORIAL_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_PACIENTE_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_EMPLEADO_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_FECHA_REGISTRO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_DIAGNOSTICO VARCHAR2(1000) NOT NULL,
    FIDE_TRATAMIENTO VARCHAR2(1000),
    FIDE_OBSERVACIONES VARCHAR2(2000),
    CONSTRAINT fk_historial_paciente FOREIGN KEY (FIDE_PACIENTE_CEDULA) REFERENCES FIDE_PACIENTES_TB(FIDE_PACIENTE_CEDULA),
    CONSTRAINT fk_historial_empleado FOREIGN KEY (FIDE_EMPLEADO_CEDULA) REFERENCES FIDE_EMPLEADOS_TB(FIDE_EMPLEADO_CEDULA)
);

--Tabla para hospitalizaciones:

CREATE TABLE FIDE_HOSPITALIZACIONES_TB (
    FIDE_HOSPITALIZACION_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_PACIENTE_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_SALA_ID NUMBER NOT NULL,
    FIDE_EMPLEADO_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_FECHA_INGRESO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_FECHA_ALTA TIMESTAMP,
    FIDE_MOTIVO_INGRESO VARCHAR2(500) NOT NULL,
    FIDE_DIAGNOSTICO_INGRESO VARCHAR2(500) NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    CONSTRAINT fk_hosp_paciente FOREIGN KEY (FIDE_PACIENTE_CEDULA) REFERENCES FIDE_PACIENTES_TB(FIDE_PACIENTE_CEDULA),
    CONSTRAINT fk_hosp_sala FOREIGN KEY (FIDE_SALA_ID) REFERENCES FIDE_SALAS_TB(FIDE_SALA_ID),
    CONSTRAINT fk_hosp_empleado FOREIGN KEY (FIDE_EMPLEADO_CEDULA) REFERENCES FIDE_EMPLEADOS_TB(FIDE_EMPLEADO_CEDULA)
);

--Tabla para recibos:

CREATE TABLE FIDE_RECIBOS_TB (
    FIDE_RECIBO_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_FACTURA_ID NUMBER NOT NULL,
    FIDE_FECHA_PAGO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_METODO_PAGO VARCHAR2(50) NOT NULL,
    FIDE_MONTO_PAGADO NUMBER(12,2) NOT NULL,
    FIDE_REFERENCIA_PAGO VARCHAR2(100),
    CONSTRAINT fk_recibo_factura FOREIGN KEY (FIDE_FACTURA_ID) REFERENCES FIDE_FACTURAS_TB(FIDE_FACTURA_ID)
);

--Tablas para seguridad y autenticación:

CREATE TABLE FIDE_LOGS_ACCESO_TB (
    FIDE_LOG_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_USUARIO_ID NUMBER,
    FIDE_FECHA_ACCESO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_IP_ACCESO VARCHAR2(50),
    FIDE_ACCION VARCHAR2(100) NOT NULL,
    FIDE_RESULTADO VARCHAR2(20) NOT NULL,
    CONSTRAINT fk_log_usuario FOREIGN KEY (FIDE_USUARIO_ID) REFERENCES FIDE_USUARIOS_TB(FIDE_USUARIO_ID)
);

CREATE TABLE FIDE_TOKENS_SEGURIDAD_TB (
    FIDE_TOKEN_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_USUARIO_ID NUMBER NOT NULL,
    FIDE_TOKEN VARCHAR2(255) NOT NULL,
    FIDE_FECHA_CREACION TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_FECHA_EXPIRACION TIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    CONSTRAINT fk_token_usuario FOREIGN KEY (FIDE_USUARIO_ID) REFERENCES FIDE_USUARIOS_TB(FIDE_USUARIO_ID)
);

-- Modificación a la tabla de usuarios existente
ALTER TABLE FIDE_USUARIOS_TB ADD (
    FIDE_ESTADO_USUARIO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    FIDE_INTENTOS_FALLIDOS NUMBER DEFAULT 0,
    FIDE_ULTIMA_CONEXION TIMESTAMP
);

--Tablas para permisos:

CREATE TABLE FIDE_PERMISOS_TB (
    FIDE_PERMISO_ID NUMBER PRIMARY KEY,
    FIDE_NOMBRE_PERMISO VARCHAR2(50) UNIQUE NOT NULL,
    FIDE_DESCRIPCION_PERMISO VARCHAR2(200)
);

CREATE TABLE FIDE_ROLES_PERMISOS_TB (
    FIDE_ROL_ID NUMBER,
    FIDE_PERMISO_ID NUMBER,
    PRIMARY KEY (FIDE_ROL_ID, FIDE_PERMISO_ID),
    CONSTRAINT fk_rol_permiso_rol FOREIGN KEY (FIDE_ROL_ID) REFERENCES FIDE_ROLES_TB(FIDE_ROL_ID),
    CONSTRAINT fk_rol_permiso_permiso FOREIGN KEY (FIDE_PERMISO_ID) REFERENCES FIDE_PERMISOS_TB(FIDE_PERMISO_ID)
);

--Tabla para notificaciones:

CREATE TABLE FIDE_NOTIFICACIONES_TB (
    FIDE_NOTIFICACION_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_TIPO_NOTIFICACION VARCHAR2(50) NOT NULL,
    FIDE_DESTINATARIO VARCHAR2(200) NOT NULL,
    FIDE_ASUNTO VARCHAR2(200) NOT NULL,
    FIDE_CUERPO VARCHAR2(4000) NOT NULL,
    FIDE_FECHA_ENVIO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'PENDIENTE' NOT NULL
);

--Tabla para descuentos:

CREATE TABLE FIDE_DESCUENTOS_TB (
    FIDE_DESCUENTO_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_CODIGO_DESCUENTO VARCHAR2(20) UNIQUE NOT NULL,
    FIDE_PORCENTAJE_DESCUENTO NUMBER(5,2) NOT NULL,
    FIDE_FECHA_INICIO TIMESTAMP NOT NULL,
    FIDE_FECHA_FIN TIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL
);

-- Actualización en facturas para soportar descuentos
ALTER TABLE FIDE_FACTURAS_TB ADD (
    FIDE_DESCUENTO_ID NUMBER,
    FIDE_PORCENTAJE_APLICADO NUMBER(5,2) DEFAULT 0,
    CONSTRAINT fk_factura_descuento FOREIGN KEY (FIDE_DESCUENTO_ID) REFERENCES FIDE_DESCUENTOS_TB(FIDE_DESCUENTO_ID)
);

-- ==============================================
--            VISTAS
-- Actualizacion de las vistas, para meter el sufijo FIDE y la abreviatura
--===============================================


-- Eliminar Vistas Existentes
DROP VIEW vista_empleados_activos;
DROP VIEW vista_pacientes_con_deuda;
DROP VIEW vista_historial_citas;
DROP VIEW vista_disponibilidad_salas;
DROP VIEW vista_estado_facturacion;


--Vista de Empleados Activos
CREATE OR REPLACE VIEW FIDE_VISTA_EMPLEADOS_ACTIVOS_V AS
SELECT FIDE_EMPLEADO_CEDULA, FIDE_NOMBRE_EMPLEADO, FIDE_APELLIDOS_EMPLEADO, FIDE_ESTADO_EMPLEADO 
FROM FIDE_EMPLEADOS_TB WHERE FIDE_ESTADO_EMPLEADO = 'ACTIVO';

--Vista de Pacientes con Deudas Pendientes
CREATE OR REPLACE VIEW FIDE_VISTA_PACIENTES_CON_DEUDA_V AS
SELECT p.FIDE_PACIENTE_CEDULA, p.FIDE_NOMBRE_PACIENTE, p.FIDE_APELLIDOS_PACIENTE, p.FIDE_DEUDA_PACIENTE, ep.FIDE_DESCRIPCION_ESTADO_PACIENTE AS estado
FROM FIDE_PACIENTES_TB p
JOIN FIDE_ESTADOS_PACIENTES_TB ep ON p.FIDE_ESTADO_PACIENTE_ID = ep.FIDE_ESTADO_PACIENTE_ID
WHERE p.FIDE_DEUDA_PACIENTE > 0;

--Vista de Historial de Citas

CREATE OR REPLACE VIEW FIDE_VISTA_HISTORIAL_CITAS_V AS
SELECT c.FIDE_CITA_ID, 
       c.FIDE_PACIENTE_CEDULA, 
       c.FIDE_EMPLEADO_CEDULA, 
       c.FIDE_FECHA_CITA, 
       c.FIDE_MOTIVO_CITA,
       p.FIDE_NOMBRE_PACIENTE, 
       e.FIDE_NOMBRE_EMPLEADO
FROM FIDE_CITAS_TB c
JOIN FIDE_PACIENTES_TB p ON c.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
JOIN FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA;

--Vista de Disponibilidad de Salas

CREATE OR REPLACE VIEW FIDE_VISTA_DISPONIBILIDAD_SALAS_V AS
SELECT s.FIDE_SALA_ID, s.FIDE_CAPACIDAD_SALA, ts.FIDE_DESCRIPCION_TIPO_SALA AS tipo, es.FIDE_DESCRIPCION_ESTADO_SALA AS estado
FROM FIDE_SALAS_TB s
JOIN FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
JOIN FIDE_ESTADOS_SALAS_TB es ON s.FIDE_ESTADO_SALA_ID = es.FIDE_ESTADO_SALA_ID
WHERE es.FIDE_DESCRIPCION_ESTADO_SALA = 'Disponible';

Vista de Estado de Facturación de Pacientes

CREATE OR REPLACE VIEW FIDE_VISTA_ESTADO_FACTURACION_V AS
SELECT f.FIDE_FACTURA_ID, 
       p.FIDE_NOMBRE_PACIENTE, 
       f.FIDE_TOTAL_FACTURA, 
       f.FIDE_ESTADO_FACTURA
FROM FIDE_FACTURAS_TB f
JOIN FIDE_PACIENTES_TB p ON f.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA;

-- ==============================================
--           NUEVAS VISTAS
--===============================================
--Vistas de empleados por tipo
CREATE OR REPLACE VIEW FIDE_VISTA_EMPLEADOS_POR_TIPO_V AS
SELECT 
    e.FIDE_EMPLEADO_CEDULA, 
    e.FIDE_NOMBRE_EMPLEADO, 
    e.FIDE_APELLIDOS_EMPLEADO, 
    te.FIDE_DESCRIPCION_TIPO_EMPLEADO 
FROM 
    FIDE_EMPLEADOS_TB e
JOIN 
    FIDE_TIPOS_EMPLEADOS_TB te ON e.FIDE_TIPO_EMPLEADO_ID = te.FIDE_TIPO_EMPLEADO_ID;
   
    
--Vistas de pacientes por estado
CREATE OR REPLACE VIEW FIDE_VISTA_PACIENTES_POR_ESTADO_V AS
SELECT 
    p.FIDE_PACIENTE_CEDULA, 
    p.FIDE_NOMBRE_PACIENTE, 
    ep.FIDE_DESCRIPCION_ESTADO_PACIENTE 
FROM 
    FIDE_PACIENTES_TB p
JOIN 
    FIDE_ESTADOS_PACIENTES_TB ep ON p.FIDE_ESTADO_PACIENTE_ID = ep.FIDE_ESTADO_PACIENTE_ID;


--Vistas de citas por paciente
CREATE OR REPLACE VIEW FIDE_VISTA_CITAS_POR_PACIENTE_V AS
SELECT 
    c.FIDE_CITA_ID, 
    c.FIDE_PACIENTE_CEDULA, 
    c.FIDE_EMPLEADO_CEDULA, 
    c.FIDE_FECHA_CITA, 
    c.FIDE_MOTIVO_CITA,
    p.FIDE_NOMBRE_PACIENTE,
    e.FIDE_NOMBRE_EMPLEADO
FROM 
    FIDE_CITAS_TB c
JOIN 
    FIDE_PACIENTES_TB p ON c.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
JOIN 
    FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA;
    
    
--Vistas de facturas pendientes
CREATE OR REPLACE VIEW FIDE_VISTA_FACTURAS_PENDIENTES_V AS
SELECT 
    f.FIDE_FACTURA_ID, 
    f.FIDE_PACIENTE_CEDULA,
    p.FIDE_NOMBRE_PACIENTE,
    f.FIDE_TOTAL_FACTURA,
    f.FIDE_ESTADO_FACTURA
FROM 
    FIDE_FACTURAS_TB f
JOIN 
    FIDE_PACIENTES_TB p ON f.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
WHERE 
    f.FIDE_ESTADO_FACTURA = 'PENDIENTE';
    

--Vistas de hospitalizaciones activas
CREATE OR REPLACE VIEW FIDE_VISTA_HOSPITALIZACIONES_ACTIVAS_V AS
SELECT 
    h.FIDE_HOSPITALIZACION_ID, 
    h.FIDE_PACIENTE_CEDULA, 
    p.FIDE_NOMBRE_PACIENTE, 
    h.FIDE_FECHA_INGRESO, 
    h.FIDE_MOTIVO_INGRESO,
    ts.FIDE_DESCRIPCION_TIPO_SALA
FROM 
    FIDE_HOSPITALIZACIONES_TB h
JOIN 
    FIDE_PACIENTES_TB p ON h.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
JOIN 
    FIDE_SALAS_TB s ON h.FIDE_SALA_ID = s.FIDE_SALA_ID
JOIN 
    FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
WHERE 
    h.FIDE_FECHA_ALTA IS NULL;
    
    
--Vistas de notificaciones pendientes
CREATE OR REPLACE VIEW FIDE_VISTA_NOTIFICACIONES_PENDIENTES_V AS
SELECT 
    n.FIDE_NOTIFICACION_ID,
    n.FIDE_TIPO_NOTIFICACION,
    n.FIDE_DESTINATARIO,
    n.FIDE_ASUNTO,
    n.FIDE_FECHA_ENVIO
FROM 
    FIDE_NOTIFICACIONES_TB n
WHERE 
    n.FIDE_ESTADO = 'PENDIENTE';
    
    
--Vistas de Logs de acceso por usuario
CREATE OR REPLACE VIEW FIDE_VISTA_LOGS_ACCESO_POR_USUARIO_V AS
SELECT 
    la.FIDE_LOG_ID,
    u.FIDE_USUARIO_ID,
    u.FIDE_NOMBRE_USUARIO,
    la.FIDE_FECHA_ACCESO,
    la.FIDE_IP_ACCESO,
    la.FIDE_ACCION,
    la.FIDE_RESULTADO
FROM 
    FIDE_LOGS_ACCESO_TB la
LEFT JOIN 
    FIDE_USUARIOS_TB u ON la.FIDE_USUARIO_ID = u.FIDE_USUARIO_ID
ORDER BY 
    la.FIDE_FECHA_ACCESO DESC;



-- ==============================================
--           TRIGGUERS 
--===============================================
--Trigger para insertar empleados
CREATE OR REPLACE TRIGGER FIDE_TRG_INSERTAR_EMPLEADO
BEFORE INSERT ON FIDE_EMPLEADOS_TB
FOR EACH ROW
BEGIN
    IF :NEW.FIDE_ESTADO_EMPLEADO IS NULL THEN
        :NEW.FIDE_ESTADO_EMPLEADO := 'ACTIVO';
    END IF;
END;
/


--Trigger para actualizar facturas
CREATE OR REPLACE TRIGGER FIDE_TRG_ACTUALIZAR_FACTURA
BEFORE UPDATE ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
    IF :NEW.FIDE_TOTAL_FACTURA <> :OLD.FIDE_TOTAL_FACTURA THEN
        :NEW.FIDE_ESTADO_FACTURA := 'PENDIENTE';
    END IF;
END;
/


--Trigger para eliminar pacientes
CREATE OR REPLACE TRIGGER FIDE_TRG_ELIMINAR_PACIENTE
BEFORE DELETE ON FIDE_PACIENTES_TB
FOR EACH ROW
DECLARE
    v_contador NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_contador 
    FROM FIDE_FACTURAS_TB f 
    WHERE f.FIDE_PACIENTE_CEDULA = :OLD.FIDE_PACIENTE_CEDULA AND f.FIDE_ESTADO_FACTURA = 'PENDIENTE';
    
    IF v_contador > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar el paciente. Existen facturas pendientes.');
    END IF;
END;
/


--Trigger para resgistro de acceso
CREATE OR REPLACE TRIGGER FIDE_TRG_INSERTAR_LOG_ACCESO
BEFORE INSERT ON FIDE_LOGS_ACCESO_TB
FOR EACH ROW
BEGIN
    IF :NEW.FIDE_RESULTADO IS NULL THEN
        :NEW.FIDE_RESULTADO := 'FALLO';
    END IF;
END;
/


--Trigger para actualziar estado de hospitalizacion
CREATE OR REPLACE TRIGGER FIDE_TRG_ACTUALIZAR_HOSPITALIZACION
BEFORE UPDATE ON FIDE_HOSPITALIZACIONES_TB
FOR EACH ROW
BEGIN
    IF :NEW.FIDE_FECHA_ALTA IS NOT NULL THEN
        :NEW.FIDE_ESTADO := 'ALTA';
    END IF;
END;
/




-- ==============================================
-- ============ PAQUETES ========================
-- ==============================================
-- Actualizacion de los cursores por indicacion de la profe
-- ya los cursores no en bloques si no en procedimientos 
-- dentro de paquetes, implementacion de las nuevas tablas
-- para un mejor desempeño, tambien la actualizacion de la nomenclatura 
-- con el sufijo FIDE y la abreviatura
--===============================================
-- ==============================================
-- ==============================================

-- 1. Paquete de Empleados Activos (Actualizado)
CREATE OR REPLACE PACKAGE FIDE_EMPLEADOS_ACTIVOS_PKG AS
    PROCEDURE FIDE_LISTAR_EMPLEADOS_ACTIVOS_PROC;
END FIDE_EMPLEADOS_ACTIVOS_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_EMPLEADOS_ACTIVOS_PKG AS
    PROCEDURE FIDE_LISTAR_EMPLEADOS_ACTIVOS_PROC IS
        CURSOR cur_empleados_activos IS 
            SELECT 
                e.FIDE_EMPLEADO_CEDULA, 
                e.FIDE_NOMBRE_EMPLEADO, 
                e.FIDE_APELLIDOS_EMPLEADO, 
                e.FIDE_TELEFONO_EMPLEADO,
                e.FIDE_DIRECCION_EMPLEADO,
                e.FIDE_CORREO_EMPLEADO,
                e.FIDE_ESTADO_EMPLEADO,
                te.FIDE_DESCRIPCION_TIPO_EMPLEADO
            FROM 
                FIDE_EMPLEADOS_TB e
            JOIN 
                FIDE_TIPOS_EMPLEADOS_TB te ON e.FIDE_TIPO_EMPLEADO_ID = te.FIDE_TIPO_EMPLEADO_ID
            WHERE 
                e.FIDE_ESTADO_EMPLEADO = 'ACTIVO';
    BEGIN
        OPEN cur_empleados_activos;
         
        CLOSE cur_empleados_activos;
    END FIDE_LISTAR_EMPLEADOS_ACTIVOS_PROC;
END FIDE_EMPLEADOS_ACTIVOS_PKG;
/

-- 2. Paquete de Pacientes con Deuda (Actualizado)
CREATE OR REPLACE PACKAGE FIDE_PACIENTES_DEUDA_PKG AS
    PROCEDURE FIDE_LISTAR_PACIENTES_CON_DEUDA_PROC;
END FIDE_PACIENTES_DEUDA_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PACIENTES_DEUDA_PKG AS
    PROCEDURE FIDE_LISTAR_PACIENTES_CON_DEUDA_PROC IS
        CURSOR cur_pacientes_con_deuda IS 
            SELECT 
                p.FIDE_PACIENTE_CEDULA, 
                p.FIDE_NOMBRE_PACIENTE,
                p.FIDE_APELLIDOS_PACIENTE,
                p.FIDE_TELEFONO_PACIENTE,
                p.FIDE_CORREO_PACIENTE,
                ep.FIDE_DESCRIPCION_ESTADO_PACIENTE, 
                p.FIDE_DEUDA_PACIENTE,
                (SELECT COUNT(*) FROM FIDE_FACTURAS_TB f WHERE f.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA AND f.FIDE_ESTADO_FACTURA = 'PENDIENTE') AS facturas_pendientes
            FROM 
                FIDE_PACIENTES_TB p
            JOIN 
                FIDE_ESTADOS_PACIENTES_TB ep ON p.FIDE_ESTADO_PACIENTE_ID = ep.FIDE_ESTADO_PACIENTE_ID
            WHERE 
                p.FIDE_DEUDA_PACIENTE > 0
            ORDER BY 
                p.FIDE_DEUDA_PACIENTE DESC;
    BEGIN
        OPEN cur_pacientes_con_deuda;
         
        CLOSE cur_pacientes_con_deuda;
    END FIDE_LISTAR_PACIENTES_CON_DEUDA_PROC;
END FIDE_PACIENTES_DEUDA_PKG;
/

-- 3. Paquete de Historial de Citas (Actualizado con nueva tabla de historial médico)
CREATE OR REPLACE PACKAGE FIDE_HISTORIAL_CITAS_PKG AS
    PROCEDURE FIDE_LISTAR_HISTORIAL_CITAS_PROC;
    PROCEDURE FIDE_LISTAR_HISTORIAL_CITAS_PACIENTE_PROC(p_cedula_paciente IN VARCHAR2);
END FIDE_HISTORIAL_CITAS_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_HISTORIAL_CITAS_PKG AS
    PROCEDURE FIDE_LISTAR_HISTORIAL_CITAS_PROC IS
        CURSOR cur_historial_citas IS 
            SELECT 
                c.FIDE_CITA_ID, 
                c.FIDE_PACIENTE_CEDULA, 
                c.FIDE_EMPLEADO_CEDULA, 
                c.FIDE_FECHA_CITA, 
                c.FIDE_MOTIVO_CITA,
                c.FIDE_SALA_ID,
                p.FIDE_NOMBRE_PACIENTE,
                p.FIDE_APELLIDOS_PACIENTE,
                e.FIDE_NOMBRE_EMPLEADO,
                e.FIDE_APELLIDOS_EMPLEADO,
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                (SELECT COUNT(*) FROM FIDE_HISTORIAL_MEDICO_TB hm 
                 WHERE hm.FIDE_PACIENTE_CEDULA = c.FIDE_PACIENTE_CEDULA) AS registros_historial
            FROM 
                FIDE_CITAS_TB c
            JOIN 
                FIDE_PACIENTES_TB p ON c.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
            JOIN 
                FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA
            JOIN
                FIDE_SALAS_TB s ON c.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            ORDER BY 
                c.FIDE_FECHA_CITA DESC;
    BEGIN
        OPEN cur_historial_citas;
         
        CLOSE cur_historial_citas;
    END FIDE_LISTAR_HISTORIAL_CITAS_PROC;
    
    PROCEDURE FIDE_LISTAR_HISTORIAL_CITAS_PACIENTE_PROC(p_cedula_paciente IN VARCHAR2) IS
        CURSOR cur_historial_citas_paciente IS 
            SELECT 
                c.FIDE_CITA_ID, 
                c.FIDE_FECHA_CITA, 
                c.FIDE_MOTIVO_CITA,
                e.FIDE_NOMBRE_EMPLEADO,
                e.FIDE_APELLIDOS_EMPLEADO,
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                hm.FIDE_HISTORIAL_ID,
                hm.FIDE_DIAGNOSTICO,
                hm.FIDE_TRATAMIENTO
            FROM 
                FIDE_CITAS_TB c
            JOIN 
                FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA
            JOIN
                FIDE_SALAS_TB s ON c.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            LEFT JOIN
                FIDE_HISTORIAL_MEDICO_TB hm ON c.FIDE_PACIENTE_CEDULA = hm.FIDE_PACIENTE_CEDULA
                                         AND TRUNC(c.FIDE_FECHA_CITA) = TRUNC(hm.FIDE_FECHA_REGISTRO)
            WHERE 
                c.FIDE_PACIENTE_CEDULA = p_cedula_paciente
            ORDER BY 
                c.FIDE_FECHA_CITA DESC;
    BEGIN
        OPEN cur_historial_citas_paciente;
         
        CLOSE cur_historial_citas_paciente;
    END FIDE_LISTAR_HISTORIAL_CITAS_PACIENTE_PROC;
END FIDE_HISTORIAL_CITAS_PKG;
/

-- 4. Paquete de Salas Disponibles (Actualizado)
CREATE OR REPLACE PACKAGE FIDE_SALAS_DISPONIBLES_PKG AS
    PROCEDURE FIDE_LISTAR_SALAS_DISPONIBLES_PROC;
    PROCEDURE FIDE_LISTAR_SALAS_DISPONIBLES_FECHA_PROC(p_fecha IN TIMESTAMP);
END FIDE_SALAS_DISPONIBLES_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_SALAS_DISPONIBLES_PKG AS
    PROCEDURE FIDE_LISTAR_SALAS_DISPONIBLES_PROC IS
        CURSOR cur_salas_disponibles IS 
            SELECT 
                s.FIDE_SALA_ID, 
                s.FIDE_CAPACIDAD_SALA, 
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                es.FIDE_DESCRIPCION_ESTADO_SALA,
                s.FIDE_PRECIO_HORA_SALA,
                (SELECT COUNT(*) FROM FIDE_CITAS_TB c 
                 WHERE c.FIDE_SALA_ID = s.FIDE_SALA_ID 
                 AND c.FIDE_FECHA_CITA > SYSTIMESTAMP) AS citas_programadas,
                (SELECT COUNT(*) FROM FIDE_ALQUILERES_TB a 
                 WHERE a.FIDE_SALA_ID = s.FIDE_SALA_ID 
                 AND (a.FIDE_FECHA_FIN_ALQUILER IS NULL OR a.FIDE_FECHA_FIN_ALQUILER > SYSTIMESTAMP)) AS alquileres_activos
            FROM 
                FIDE_SALAS_TB s
            JOIN 
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            JOIN 
                FIDE_ESTADOS_SALAS_TB es ON s.FIDE_ESTADO_SALA_ID = es.FIDE_ESTADO_SALA_ID
            WHERE 
                es.FIDE_DESCRIPCION_ESTADO_SALA = 'Disponible';
    BEGIN
        OPEN cur_salas_disponibles;
         
        CLOSE cur_salas_disponibles;
    END FIDE_LISTAR_SALAS_DISPONIBLES_PROC;
    
    PROCEDURE FIDE_LISTAR_SALAS_DISPONIBLES_FECHA_PROC(p_fecha IN TIMESTAMP) IS
        CURSOR cur_salas_disponibles_fecha IS 
            SELECT 
                s.FIDE_SALA_ID, 
                s.FIDE_CAPACIDAD_SALA, 
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                es.FIDE_DESCRIPCION_ESTADO_SALA,
                s.FIDE_PRECIO_HORA_SALA
            FROM 
                FIDE_SALAS_TB s
            JOIN 
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            JOIN 
                FIDE_ESTADOS_SALAS_TB es ON s.FIDE_ESTADO_SALA_ID = es.FIDE_ESTADO_SALA_ID
            WHERE 
                es.FIDE_DESCRIPCION_ESTADO_SALA = 'Disponible'
                AND NOT EXISTS (
                    SELECT 1 FROM FIDE_CITAS_TB c 
                    WHERE c.FIDE_SALA_ID = s.FIDE_SALA_ID 
                    AND TRUNC(c.FIDE_FECHA_CITA) = TRUNC(p_fecha)
                )
                AND NOT EXISTS (
                    SELECT 1 FROM FIDE_ALQUILERES_TB a 
                    WHERE a.FIDE_SALA_ID = s.FIDE_SALA_ID 
                    AND p_fecha BETWEEN a.FIDE_FECHA_INICIO_ALQUILER AND 
                    COALESCE(a.FIDE_FECHA_FIN_ALQUILER, TO_TIMESTAMP('9999-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'))
                );
    BEGIN
        OPEN cur_salas_disponibles_fecha;
         
        CLOSE cur_salas_disponibles_fecha;
    END FIDE_LISTAR_SALAS_DISPONIBLES_FECHA_PROC;
END FIDE_SALAS_DISPONIBLES_PKG;
/

-- 5. Paquete de Estado de Facturación (Actualizado con tabla de recibos)
CREATE OR REPLACE PACKAGE FIDE_ESTADO_FACTURACION_PKG AS
    PROCEDURE FIDE_LISTAR_ESTADO_FACTURACION_PROC;
    PROCEDURE FIDE_LISTAR_ESTADO_FACTURACION_PACIENTE_PROC(p_cedula_paciente IN VARCHAR2);
END FIDE_ESTADO_FACTURACION_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_ESTADO_FACTURACION_PKG AS
    PROCEDURE FIDE_LISTAR_ESTADO_FACTURACION_PROC IS
        CURSOR cur_estado_facturacion IS 
            SELECT 
                f.FIDE_FACTURA_ID, 
                f.FIDE_PACIENTE_CEDULA, 
                p.FIDE_NOMBRE_PACIENTE,
                p.FIDE_APELLIDOS_PACIENTE,
                f.FIDE_TOTAL_FACTURA, 
                f.FIDE_ESTADO_FACTURA,
                f.FIDE_PORCENTAJE_APLICADO,
                (SELECT COUNT(*) FROM FIDE_DETALLES_FACTURAS_TB df 
                 WHERE df.FIDE_FACTURA_ID = f.FIDE_FACTURA_ID) AS num_detalles,
                (SELECT COUNT(*) FROM FIDE_RECIBOS_TB r 
                 WHERE r.FIDE_FACTURA_ID = f.FIDE_FACTURA_ID) AS recibos_pagos
            FROM 
                FIDE_FACTURAS_TB f
            JOIN 
                FIDE_PACIENTES_TB p ON f.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
            ORDER BY
                f.FIDE_ESTADO_FACTURA, f.FIDE_FACTURA_ID DESC;
    BEGIN
        OPEN cur_estado_facturacion;
         
        CLOSE cur_estado_facturacion;
    END FIDE_LISTAR_ESTADO_FACTURACION_PROC;
    
    PROCEDURE FIDE_LISTAR_ESTADO_FACTURACION_PACIENTE_PROC(p_cedula_paciente IN VARCHAR2) IS
        CURSOR cur_facturas_paciente IS 
            SELECT 
                f.FIDE_FACTURA_ID, 
                f.FIDE_TOTAL_FACTURA, 
                f.FIDE_ESTADO_FACTURA,
                f.FIDE_PORCENTAJE_APLICADO,
                (SELECT COUNT(*) FROM FIDE_DETALLES_FACTURAS_TB df 
                 WHERE df.FIDE_FACTURA_ID = f.FIDE_FACTURA_ID) AS num_detalles
            FROM 
                FIDE_FACTURAS_TB f
            WHERE 
                f.FIDE_PACIENTE_CEDULA = p_cedula_paciente
            ORDER BY
                f.FIDE_ESTADO_FACTURA, f.FIDE_FACTURA_ID DESC;
    BEGIN
        OPEN cur_facturas_paciente;
         
        CLOSE cur_facturas_paciente;
    END FIDE_LISTAR_ESTADO_FACTURACION_PACIENTE_PROC;
END FIDE_ESTADO_FACTURACION_PKG;
/

-- 6. Paquete de Medicamentos Disponibles (Actualizado)
CREATE OR REPLACE PACKAGE FIDE_MEDICAMENTOS_DISPONIBLES_PKG AS
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_DISPONIBLES_PROC;
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_AGOTADOS_PROC;
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_RESERVADOS_PROC;
END FIDE_MEDICAMENTOS_DISPONIBLES_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_MEDICAMENTOS_DISPONIBLES_PKG AS
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_DISPONIBLES_PROC IS
        CURSOR cur_medicamentos_disponibles IS 
            SELECT 
                m.FIDE_MEDICAMENTO_ID, 
                m.FIDE_NOMBRE_MEDICAMENTO, 
                m.FIDE_PRECIO_MEDICAMENTO,
                m.FIDE_CANTIDAD_MEDICAMENTO,
                m.FIDE_INFORMACION_MEDICAMENTO,
                (SELECT COUNT(*) FROM FIDE_MEDICAMENTOS_RESERVADOS_TB mr 
                 WHERE mr.FIDE_MEDICAMENTO_ID = m.FIDE_MEDICAMENTO_ID) AS cantidad_reservada
            FROM 
                FIDE_MEDICAMENTOS_TB m
            WHERE 
                m.FIDE_CANTIDAD_MEDICAMENTO > 0
            ORDER BY
                m.FIDE_MEDICAMENTO_ID;
    BEGIN
        OPEN cur_medicamentos_disponibles;
         
        CLOSE cur_medicamentos_disponibles;
    END FIDE_LISTAR_MEDICAMENTOS_DISPONIBLES_PROC;
    
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_AGOTADOS_PROC IS
        CURSOR cur_medicamentos_agotados IS 
            SELECT 
                FIDE_MEDICAMENTO_ID, 
                FIDE_NOMBRE_MEDICAMENTO, 
                FIDE_PRECIO_MEDICAMENTO,
                FIDE_INFORMACION_MEDICAMENTO
            FROM 
                FIDE_MEDICAMENTOS_TB
            WHERE 
                FIDE_CANTIDAD_MEDICAMENTO = 0
            ORDER BY
                FIDE_MEDICAMENTO_ID;
    BEGIN
        OPEN cur_medicamentos_agotados;
         
        CLOSE cur_medicamentos_agotados;
    END FIDE_LISTAR_MEDICAMENTOS_AGOTADOS_PROC;
    
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_RESERVADOS_PROC IS
        CURSOR cur_medicamentos_reservados IS 
            SELECT 
                mr.FIDE_RESERVA_ID,
                mr.FIDE_PACIENTE_CEDULA,
                p.FIDE_NOMBRE_PACIENTE,
                p.FIDE_APELLIDOS_PACIENTE,
                mr.FIDE_MEDICAMENTO_ID,
                m.FIDE_NOMBRE_MEDICAMENTO,
                mr.FIDE_CANTIDAD_MEDICAMENTO,
                m.FIDE_PRECIO_MEDICAMENTO
            FROM 
                FIDE_MEDICAMENTOS_RESERVADOS_TB mr
            JOIN 
                FIDE_MEDICAMENTOS_TB m ON mr.FIDE_MEDICAMENTO_ID = m.FIDE_MEDICAMENTO_ID
            JOIN 
                FIDE_PACIENTES_TB p ON mr.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
            ORDER BY
                mr.FIDE_RESERVA_ID;
    BEGIN
        OPEN cur_medicamentos_reservados;
         
        CLOSE cur_medicamentos_reservados;
    END FIDE_LISTAR_MEDICAMENTOS_RESERVADOS_PROC;
END FIDE_MEDICAMENTOS_DISPONIBLES_PKG;
/

-- 7. Paquete de Alquileres (Actualizado)

CREATE OR REPLACE PACKAGE FIDE_ALQUILERES_PKG AS
    PROCEDURE FIDE_LISTAR_ALQUILERES_PROC;
    PROCEDURE FIDE_LISTAR_ALQUILERES_ACTIVOS_PROC;
    PROCEDURE FIDE_CALCULAR_INGRESOS_ALQUILERES_PROC(p_fecha_inicio IN TIMESTAMP, p_fecha_fin IN TIMESTAMP);
END FIDE_ALQUILERES_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_ALQUILERES_PKG AS
    PROCEDURE FIDE_LISTAR_ALQUILERES_PROC IS
        CURSOR cur_alquileres IS 
            SELECT 
                a.FIDE_ALQUILER_ID, 
                a.FIDE_SALA_ID, 
                a.FIDE_DOCTOR_ALQUILER, 
                a.FIDE_FECHA_INICIO_ALQUILER, 
                a.FIDE_FECHA_FIN_ALQUILER,
                a.FIDE_TOTAL_ALQUILER,
                s.FIDE_CAPACIDAD_SALA,
                s.FIDE_PRECIO_HORA_SALA,
                ts.FIDE_DESCRIPCION_TIPO_SALA
            FROM 
                FIDE_ALQUILERES_TB a
            JOIN
                FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            ORDER BY
                CASE WHEN a.FIDE_FECHA_FIN_ALQUILER IS NULL THEN 1 ELSE 0 END DESC,
                a.FIDE_FECHA_INICIO_ALQUILER DESC;
    BEGIN
        OPEN cur_alquileres;
        CLOSE cur_alquileres;
    END FIDE_LISTAR_ALQUILERES_PROC;
    
    PROCEDURE FIDE_LISTAR_ALQUILERES_ACTIVOS_PROC IS
        CURSOR cur_alquileres_activos IS 
            SELECT 
                a.FIDE_ALQUILER_ID, 
                a.FIDE_SALA_ID, 
                a.FIDE_DOCTOR_ALQUILER, 
                a.FIDE_FECHA_INICIO_ALQUILER,
                s.FIDE_PRECIO_HORA_SALA,
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                -- Convertir la diferencia de timestamps a días y luego multiplicar por 24
                ROUND(EXTRACT(DAY FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER)) * 24 + 
                     EXTRACT(HOUR FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER)) +
                     EXTRACT(MINUTE FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER))/60, 2) AS duracion_horas,
                -- Usar el resultado calculado para el costo
                ROUND((EXTRACT(DAY FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER)) * 24 + 
                     EXTRACT(HOUR FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER)) +
                     EXTRACT(MINUTE FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER))/60) * s.FIDE_PRECIO_HORA_SALA, 2) AS costo_actual
            FROM 
                FIDE_ALQUILERES_TB a
            JOIN
                FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            WHERE
                a.FIDE_FECHA_FIN_ALQUILER IS NULL
            ORDER BY
                a.FIDE_FECHA_INICIO_ALQUILER;
    BEGIN
        OPEN cur_alquileres_activos;
        CLOSE cur_alquileres_activos;
    END FIDE_LISTAR_ALQUILERES_ACTIVOS_PROC;
    
    PROCEDURE FIDE_CALCULAR_INGRESOS_ALQUILERES_PROC(p_fecha_inicio IN TIMESTAMP, p_fecha_fin IN TIMESTAMP) IS
        CURSOR cur_ingresos_alquileres IS 
            SELECT 
                a.FIDE_ALQUILER_ID, 
                a.FIDE_SALA_ID, 
                a.FIDE_DOCTOR_ALQUILER, 
                a.FIDE_FECHA_INICIO_ALQUILER, 
                a.FIDE_FECHA_FIN_ALQUILER,
                a.FIDE_TOTAL_ALQUILER,
                ts.FIDE_DESCRIPCION_TIPO_SALA
            FROM 
                FIDE_ALQUILERES_TB a
            JOIN
                FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            WHERE
                (a.FIDE_FECHA_INICIO_ALQUILER BETWEEN p_fecha_inicio AND p_fecha_fin)
                OR (a.FIDE_FECHA_FIN_ALQUILER BETWEEN p_fecha_inicio AND p_fecha_fin)
                OR (a.FIDE_FECHA_INICIO_ALQUILER <= p_fecha_inicio AND 
                    (a.FIDE_FECHA_FIN_ALQUILER >= p_fecha_fin OR a.FIDE_FECHA_FIN_ALQUILER IS NULL))
            ORDER BY
                a.FIDE_FECHA_INICIO_ALQUILER;
    BEGIN
        OPEN cur_ingresos_alquileres;
        CLOSE cur_ingresos_alquileres;
    END FIDE_CALCULAR_INGRESOS_ALQUILERES_PROC;
END FIDE_ALQUILERES_PKG;
/


-- 8. Paquete de Pacientes Hospitalizados (Actualizado con nueva tabla)
CREATE OR REPLACE PACKAGE FIDE_PACIENTES_HOSPITALIZADOS_PKG AS 
    PROCEDURE FIDE_LISTAR_PACIENTES_HOSPITALIZADOS_PROC; 
    PROCEDURE FIDE_LISTAR_HISTORIAL_HOSPITALIZACIONES_PROC(p_cedula_paciente IN VARCHAR2); 
END FIDE_PACIENTES_HOSPITALIZADOS_PKG; 
/

CREATE OR REPLACE PACKAGE BODY FIDE_PACIENTES_HOSPITALIZADOS_PKG AS 
    PROCEDURE FIDE_LISTAR_PACIENTES_HOSPITALIZADOS_PROC IS 
        CURSOR cur_pacientes_hospitalizados IS 
            SELECT 
                h.FIDE_HOSPITALIZACION_ID, 
                h.FIDE_PACIENTE_CEDULA, 
                p.FIDE_NOMBRE_PACIENTE, 
                p.FIDE_APELLIDOS_PACIENTE, 
                h.FIDE_SALA_ID, 
                ts.FIDE_DESCRIPCION_TIPO_SALA, 
                h.FIDE_EMPLEADO_CEDULA, 
                e.FIDE_NOMBRE_EMPLEADO, 
                e.FIDE_APELLIDOS_EMPLEADO, 
                h.FIDE_FECHA_INGRESO, 
                h.FIDE_MOTIVO_INGRESO, 
                h.FIDE_DIAGNOSTICO_INGRESO, 
                -- Usar EXTRACT para calcular días de hospitalización correctamente
                ROUND(
                    EXTRACT(DAY FROM (SYSTIMESTAMP - h.FIDE_FECHA_INGRESO)) + 
                    EXTRACT(HOUR FROM (SYSTIMESTAMP - h.FIDE_FECHA_INGRESO))/24 +
                    EXTRACT(MINUTE FROM (SYSTIMESTAMP - h.FIDE_FECHA_INGRESO))/(24*60), 
                    1
                ) AS dias_hospitalizacion 
            FROM 
                FIDE_HOSPITALIZACIONES_TB h 
            JOIN 
                FIDE_PACIENTES_TB p ON h.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA 
            JOIN 
                FIDE_EMPLEADOS_TB e ON h.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA 
            JOIN 
                FIDE_SALAS_TB s ON h.FIDE_SALA_ID = s.FIDE_SALA_ID 
            JOIN 
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID 
            WHERE 
                h.FIDE_FECHA_ALTA IS NULL 
                AND h.FIDE_ESTADO = 'ACTIVO' 
            ORDER BY 
                h.FIDE_FECHA_INGRESO; 
    BEGIN 
        OPEN cur_pacientes_hospitalizados; 
        CLOSE cur_pacientes_hospitalizados; 
    END FIDE_LISTAR_PACIENTES_HOSPITALIZADOS_PROC; 
    
    PROCEDURE FIDE_LISTAR_HISTORIAL_HOSPITALIZACIONES_PROC(p_cedula_paciente IN VARCHAR2) IS 
        CURSOR cur_historial_hospitalizaciones IS 
            SELECT 
                h.FIDE_HOSPITALIZACION_ID, 
                h.FIDE_SALA_ID, 
                ts.FIDE_DESCRIPCION_TIPO_SALA, 
                h.FIDE_EMPLEADO_CEDULA, 
                e.FIDE_NOMBRE_EMPLEADO, 
                e.FIDE_APELLIDOS_EMPLEADO, 
                h.FIDE_FECHA_INGRESO, 
                h.FIDE_FECHA_ALTA, 
                h.FIDE_MOTIVO_INGRESO, 
                h.FIDE_DIAGNOSTICO_INGRESO, 
                h.FIDE_ESTADO 
            FROM 
                FIDE_HOSPITALIZACIONES_TB h 
            JOIN 
                FIDE_EMPLEADOS_TB e ON h.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA 
            JOIN 
                FIDE_SALAS_TB s ON h.FIDE_SALA_ID = s.FIDE_SALA_ID 
            JOIN 
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID 
            WHERE 
                h.FIDE_PACIENTE_CEDULA = p_cedula_paciente 
            ORDER BY 
                h.FIDE_FECHA_INGRESO DESC;
    BEGIN 
        OPEN cur_historial_hospitalizaciones; 
        CLOSE cur_historial_hospitalizaciones; 
    END FIDE_LISTAR_HISTORIAL_HOSPITALIZACIONES_PROC; 
END FIDE_PACIENTES_HOSPITALIZADOS_PKG;
/

-- ==============================================
-- ==============================================
-- ==============================================
-- NUEVAS FUNCIONES
--===============================================
-- ==============================================
-- ==============================================
--Funcion para Calcular el Total de Factura con Descuento
CREATE OR REPLACE FUNCTION FIDE_FN_CALCULAR_TOTAL_FACTURA(
    p_factura_id IN NUMBER
) RETURN NUMBER IS
    v_total_factura NUMBER;
    v_porcentaje_descuento NUMBER;
    v_total_con_descuento NUMBER;
BEGIN
    SELECT FIDE_TOTAL_FACTURA, FIDE_PORCENTAJE_APLICADO 
    INTO v_total_factura, v_porcentaje_descuento
    FROM FIDE_FACTURAS_TB 
    WHERE FIDE_FACTURA_ID = p_factura_id;

    v_total_con_descuento := v_total_factura - (v_total_factura * 
    (v_porcentaje_descuento / 100));
    
    RETURN v_total_con_descuento;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;
/


--Funcion para obtener el Nombre Completo del Paciente
CREATE OR REPLACE FUNCTION FIDE_FN_OBTENER_NOMBRE_PACIENTE(
    p_cedula IN VARCHAR2
) RETURN VARCHAR2 IS
    v_nombre_completo VARCHAR2(300);
BEGIN
    SELECT FIDE_NOMBRE_PACIENTE || ' ' || FIDE_APELLIDOS_PACIENTE
    INTO v_nombre_completo
    FROM FIDE_PACIENTES_TB
    WHERE FIDE_PACIENTE_CEDULA = p_cedula;

    RETURN v_nombre_completo;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Paciente no encontrado';
END;
/


--Funcion para Contar el Número de Intentos Fallidos de Acceso
CREATE OR REPLACE FUNCTION FIDE_FN_CONTAR_INTENTOS_FALLIDOS(
    p_usuario_id IN NUMBER
) RETURN NUMBER IS
    v_intentos NUMBER;
BEGIN
    SELECT FIDE_INTENTOS_FALLIDOS 
    INTO v_intentos
    FROM FIDE_USUARIOS_TB
    WHERE FIDE_USUARIO_ID = p_usuario_id;

    RETURN v_intentos;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;
/


--Funcion para Validar un Descuento
CREATE OR REPLACE FUNCTION FIDE_FN_VALIDAR_DESCUENTO(
    p_codigo_descuento IN VARCHAR2
) RETURN BOOLEAN IS
    v_estado VARCHAR2(20);
BEGIN
    SELECT FIDE_ESTADO 
    INTO v_estado
    FROM FIDE_DESCUENTOS_TB
    WHERE FIDE_CODIGO_DESCUENTO = p_codigo_descuento
      AND FIDE_FECHA_INICIO <= SYSTIMESTAMP 
      AND FIDE_FECHA_FIN >= SYSTIMESTAMP;

    RETURN v_estado = 'ACTIVO';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
END;
/


--Funcion para Calcular la Duracion de una Hospitalizacion
CREATE OR REPLACE FUNCTION FIDE_FN_CALCULAR_DURACION_HOSPITALIZACION(
    p_hospitalizacion_id IN NUMBER
) RETURN NUMBER IS
    v_fecha_ingreso TIMESTAMP;
    v_duracion NUMBER;
BEGIN
    SELECT FIDE_FECHA_INGRESO
    INTO v_fecha_ingreso
    FROM FIDE_HOSPITALIZACIONES_TB
    WHERE FIDE_HOSPITALIZACION_ID = p_hospitalizacion_id;

    v_duracion := TRUNC(SYSTIMESTAMP - v_fecha_ingreso);

    RETURN v_duracion;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;
/


--Funcion para calcular el Salario Total de un Empleado
CREATE OR REPLACE FUNCTION FIDE_FN_CALCULAR_SALARIO_TOTAL(
    p_empleado_id IN NUMBER
) RETURN NUMBER IS
    v_salario_por_hora NUMBER;
    v_horas_trabajadas NUMBER;
    v_salario_total NUMBER;
BEGIN
    SELECT FIDE_SALARIO_HORA, SUM(FIDE_HORAS_TRABAJADAS)
    INTO v_salario_por_hora, v_horas_trabajadas
    FROM FIDE_HORAS_TRABAJO_TB
    WHERE FIDE_EMPLEADO_ID = p_empleado_id
    GROUP BY FIDE_SALARIO_HORA;

    v_salario_total := v_salario_por_hora * v_horas_trabajadas;

    RETURN v_salario_total;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;
/


--Funcion para obtener el Estado de una Cita
CREATE OR REPLACE FUNCTION FIDE_FN_OBTENER_ESTADO_CITA(
    p_cita_id IN NUMBER
) RETURN VARCHAR2 IS
    v_estado VARCHAR2(20);
BEGIN
    SELECT FIDE_ESTADO_CITA
    INTO v_estado
    FROM FIDE_CITAS_TB
    WHERE FIDE_CITA_ID = p_cita_id;

    RETURN v_estado;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Cita no encontrada';
END;
/


--Funcion para contar el número de Pacientes con Deuda
CREATE OR REPLACE FUNCTION FIDE_FN_CONTAR_PACIENTES_CON_DEUDA RETURN NUMBER IS
    v_contador NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_contador
    FROM FIDE_PACIENTES_TB
    WHERE FIDE_DEUDA_PACIENTE > 0;

    RETURN v_contador;
END;
/


--Funcion para obtener el Tipo de Sala de un Alquiler
CREATE OR REPLACE FUNCTION FIDE_FN_OBTENER_TIPO_SALA_ALQUILER(
    p_alquiler_id IN NUMBER
) RETURN VARCHAR2 IS
    v_tipo_sala VARCHAR2(50);
BEGIN
    SELECT ts.FIDE_DESCRIPCION_TIPO_SALA
    INTO v_tipo_sala
    FROM FIDE_ALQUILERES_TB a
    JOIN FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
    JOIN FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
    WHERE a.FIDE_ALQUILER_ID = p_alquiler_id;

    RETURN v_tipo_sala;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Alquiler no encontrado';
END;
/


--Funcion para calcular el numero de Medicamentos Disponibles
CREATE OR REPLACE FUNCTION FIDE_FN_CONTAR_MEDICAMENTOS_DISPONIBLES 
RETURN NUMBER IS
    v_contador NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_contador
    FROM FIDE_MEDICAMENTOS_TB
    WHERE FIDE_CANTIDAD_MEDICAMENTO > 0;

    RETURN v_contador;
END;
/


--Funcion para calcular el Total de Alquileres en un rango de Fechas
CREATE OR REPLACE FUNCTION FIDE_FN_TOTAL_ALQUILERES(
    p_fecha_inicio IN TIMESTAMP,
    p_fecha_fin IN TIMESTAMP
) RETURN NUMBER IS
    v_total NUMBER;
BEGIN
    SELECT SUM(FIDE_TOTAL_ALQUILER)
    INTO v_total
    FROM FIDE_ALQUILERES_TB
    WHERE FIDE_FECHA_INICIO_ALQUILER BETWEEN p_fecha_inicio AND p_fecha_fin;

    RETURN NVL(v_total, 0);
END;
/


--Funcion para Validar un Usuario
CREATE OR REPLACE FUNCTION FIDE_FN_VALIDAR_USUARIO(
    p_usuario_id IN NUMBER
) RETURN BOOLEAN IS
    v_estado_usuario VARCHAR2(20);
BEGIN
    SELECT FIDE_ESTADO_USUARIO
    INTO v_estado_usuario
    FROM FIDE_USUARIOS_TB
    WHERE FIDE_USUARIO_ID = p_usuario_id;

    RETURN v_estado_usuario = 'ACTIVO';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;  
END;
/
-- ==============================================
-- ==============================================
-- ==============================================
-- NUEVOS CURSORES
--===============================================
-- ==============================================
-- ==============================================

--Cursor para listar todos los Empleados Activos
CREATE OR REPLACE CURSOR FIDE_CUR_EMPLEADOS_ACTIVOS IS
SELECT 
    e.FIDE_EMPLEADO_CEDULA,
    e.FIDE_NOMBRE_EMPLEADO,
    e.FIDE_APELLIDOS_EMPLEADO,
    e.FIDE_TELEFONO_EMPLEADO,
    e.FIDE_DIRECCION_EMPLEADO
FROM 
    FIDE_EMPLEADOS_TB e
WHERE 
    e.FIDE_ESTADO_EMPLEADO = 'ACTIVO';


--Cursor para listar todos los Pacientes con Deuda
CREATE OR REPLACE CURSOR FIDE_CUR_PACIENTES_CON_DEUDA IS
SELECT 
    p.FIDE_PACIENTE_CEDULA,
    p.FIDE_NOMBRE_PACIENTE,
    p.FIDE_APELLIDOS_PACIENTE,
    p.FIDE_DEUDA_PACIENTE
FROM 
    FIDE_PACIENTES_TB p
WHERE 
    p.FIDE_DEUDA_PACIENTE > 0;
    

--Cursor para listar todas las Citas Programadas
CREATE OR REPLACE CURSOR FIDE_CUR_CITAS_PROGRAMADAS IS
SELECT 
    c.FIDE_CITA_ID,
    c.FIDE_FECHA_CITA,
    p.FIDE_NOMBRE_PACIENTE,
    e.FIDE_NOMBRE_EMPLEADO
FROM 
    FIDE_CITAS_TB c
JOIN 
    FIDE_PACIENTES_TB p ON c.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
JOIN 
    FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA;
    
    
--Cursor para obtener Medicamentos Agotados
CREATE OR REPLACE CURSOR FIDE_CUR_MEDICAMENTOS_AGOTADOS IS
SELECT 
    m.FIDE_MEDICAMENTO_ID,
    m.FIDE_NOMBRE_MEDICAMENTO,
    m.FIDE_PRECIO_MEDICAMENTO
FROM 
    FIDE_MEDICAMENTOS_TB m
WHERE 
    m.FIDE_CANTIDAD_MEDICAMENTO = 0;
    
    
--Cursor para listar los Logs de Acceso de un Usuario
CREATE OR REPLACE CURSOR FIDE_CUR_LOGS_ACCESO(
    p_usuario_id IN NUMBER
) IS
SELECT 
    la.FIDE_LOG_ID,
    la.FIDE_FECHA_ACCESO,
    la.FIDE_IP_ACCESO,
    la.FIDE_ACCION,
    la.FIDE_RESULTADO
FROM 
    FIDE_LOGS_ACCESO_TB la
WHERE 
    la.FIDE_USUARIO_ID = p_usuario_id
ORDER BY 
    la.FIDE_FECHA_ACCESO DESC;
    
    
--Cursor para listar todas las Hospitalizaciones Activas
CREATE OR REPLACE CURSOR FIDE_CUR_HOSPITALIZACIONES_ACTIVAS IS
SELECT 
    h.FIDE_HOSPITALIZACION_ID,
    p.FIDE_NOMBRE_PACIENTE,
    h.FIDE_FECHA_INGRESO,
    h.FIDE_MOTIVO_INGRESO
FROM 
    FIDE_HOSPITALIZACIONES_TB h
JOIN 
    FIDE_PACIENTES_TB p ON h.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
WHERE 
    h.FIDE_FECHA_ALTA IS NULL;


--Cursor para listar todos los Recibos por Factura
CREATE OR REPLACE CURSOR FIDE_CUR_RECIBOS_POR_FACTURA(
    p_factura_id IN NUMBER
) IS
SELECT 
    r.FIDE_RECIBO_ID,
    r.FIDE_FECHA_PAGO,
    r.FIDE_MONTO_PAGADO,
    r.FIDE_METODO_PAGO
FROM 
    FIDE_RECIBOS_TB r
WHERE 
    r.FIDE_FACTURA_ID = p_factura_id;


---Cursor para listar Descuentos Activos
CREATE OR REPLACE CURSOR FIDE_CUR_DESCUENTOS_ACTIVOS IS
SELECT 
    d.FIDE_DESCUENTO_ID,
    d.FIDE_CODIGO_DESCUENTO,
    d.FIDE_PORCENTAJE_DESCUENTO,
    d.FIDE_FECHA_INICIO,
    d.FIDE_FECHA_FIN
FROM 
    FIDE_DESCUENTOS_TB d
WHERE 
    d.FIDE_ESTADO = 'ACTIVO'
    AND d.FIDE_FECHA_INICIO <= SYSTIMESTAMP
    AND d.FIDE_FECHA_FIN >= SYSTIMESTAMP;
    
    
--Cursor para listar todos los Medicamentos Disponibles
CREATE OR REPLACE CURSOR FIDE_CUR_MEDICAMENTOS_DISPONIBLES IS
SELECT 
    m.FIDE_MEDICAMENTO_ID,
    m.FIDE_NOMBRE_MEDICAMENTO,
    m.FIDE_PRECIO_MEDICAMENTO,
    m.FIDE_CANTIDAD_MEDICAMENTO
FROM 
    FIDE_MEDICAMENTOS_TB m
WHERE 
    m.FIDE_CANTIDAD_MEDICAMENTO > 0;
    
    
--Cursor para listar todos los Alquileres Activos
CREATE OR REPLACE CURSOR FIDE_CUR_ALQUILERES_ACTIVOS IS
SELECT 
    a.FIDE_ALQUILER_ID,
    a.FIDE_DOCTOR_ALQUILER,
    a.FIDE_FECHA_INICIO_ALQUILER,
    a.FIDE_TOTAL_ALQUILER,
    s.FIDE_CAPACIDAD_SALA
FROM 
    FIDE_ALQUILERES_TB a
JOIN 
    FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
WHERE 
    a.FIDE_FECHA_FIN_ALQUILER IS NULL;  
    
    
--Cursor para listar todas las Notificaciones Pendientes
CREATE OR REPLACE CURSOR FIDE_CUR_NOTIFICACIONES_PENDIENTES IS
SELECT 
    n.FIDE_NOTIFICACION_ID,
    n.FIDE_TIPO_NOTIFICACION,
    n.FIDE_DESTINATARIO,
    n.FIDE_ASUNTO,
    n.FIDE_CUERPO
FROM 
    FIDE_NOTIFICACIONES_TB n
WHERE 
    n.FIDE_ESTADO = 'PENDIENTE';
    
    
--Cursor para listar todos los Roles
CREATE OR REPLACE CURSOR FIDE_CUR_ROLES IS
SELECT 
    r.FIDE_ROL_ID,
    r.FIDE_NOMBRE_ROL
FROM 
    FIDE_ROLES_TB r;
    
    
--Cursor para listar todos los Historiales Médicos de un Paciente
CREATE OR REPLACE CURSOR FIDE_CUR_HISTORIAL_MEDICO(
    p_cedula_paciente IN VARCHAR2
) IS
SELECT 
    hm.FIDE_HISTORIAL_ID,
    hm.FIDE_FECHA_REGISTRO,
    hm.FIDE_DIAGNOSTICO,
    hm.FIDE_TRATAMIENTO,
    hm.FIDE_OBSERVACIONES
FROM 
    FIDE_HISTORIAL_MEDICO_TB hm
WHERE 
    hm.FIDE_PACIENTE_CEDULA = p_cedula_paciente;
    
    
--Cursor para listar todas las Hospitalizaciones de un Paciente
CREATE OR REPLACE CURSOR FIDE_CUR_HOSPITALIZACIONES_PACIENTE(
    p_cedula_paciente IN VARCHAR2
) IS
SELECT 
    h.FIDE_HOSPITALIZACION_ID,
    h.FIDE_FECHA_INGRESO,
    h.FIDE_FECHA_ALTA,
    h.FIDE_MOTIVO_INGRESO,
    h.FIDE_DIAGNOSTICO_INGRESO
FROM 
    FIDE_HOSPITALIZACIONES_TB h
WHERE 
    h.FIDE_PACIENTE_CEDULA = p_cedula_paciente;
    
    
--Cursor para listar todos los Detalles de Factura de un Paciente
CREATE OR REPLACE CURSOR FIDE_CUR_DETALLES_FACTURA(
    p_factura_id IN NUMBER
) IS
SELECT 
    df.FIDE_DETALLE_FACTURA_ID,
    df.FIDE_DESCRIPCION_FACTURA,
    df.FIDE_MONTO_FACTURA
FROM 
    FIDE_DETALLES_FACTURAS_TB df
WHERE 
    df.FIDE_FACTURA_ID = p_factura_id;

-- ==============================================
-- ==============================================
-- ==============================================
-- CRUDS 
--===============================================
-- ==============================================
-- ==============================================

----CRUD para la Tabla FIDE_USUARIOS_TB
--Crear Usuario
CREATE OR REPLACE PROCEDURE FIDE_INSERTAR_USUARIO(
    p_nombre_usuario IN VARCHAR2,
    p_contrasena IN VARCHAR2,
    p_rol_id IN NUMBER
) IS
BEGIN
    INSERT INTO FIDE_USUARIOS_TB (FIDE_NOMBRE_USUARIO, FIDE_CONTRASENA, 
    FIDE_ROL_ID, FIDE_ESTADO_USUARIO)
    VALUES (p_nombre_usuario, p_contrasena, p_rol_id, 'ACTIVO');
END;
/
--Leer Usuario
CREATE OR REPLACE PROCEDURE FIDE_LEER_USUARIO(
    p_usuario_id IN NUMBER,
    o_nombre_usuario OUT VARCHAR2,
    o_rol_id OUT NUMBER,
    o_estado OUT VARCHAR2
) IS
BEGIN
    SELECT FIDE_NOMBRE_USUARIO, FIDE_ROL_ID, FIDE_ESTADO_USUARIO
    INTO o_nombre_usuario, o_rol_id, o_estado
    FROM FIDE_USUARIOS_TB
    WHERE FIDE_USUARIO_ID = p_usuario_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        o_nombre_usuario := NULL;
        o_rol_id := NULL;
        o_estado := NULL;
END;
/
--Actualizar Usuario
CREATE OR REPLACE PROCEDURE FIDE_ACTUALIZAR_USUARIO(
    p_usuario_id IN NUMBER,
    p_nombre_usuario IN VARCHAR2,
    p_contrasena IN VARCHAR2,
    p_rol_id IN NUMBER,
    p_estado IN VARCHAR2
) IS
BEGIN
    UPDATE FIDE_USUARIOS_TB
    SET FIDE_NOMBRE_USUARIO = p_nombre_usuario,
        FIDE_CONTRASENA = p_contrasena,
        FIDE_ROL_ID = p_rol_id,
        FIDE_ESTADO_USUARIO = p_estado
    WHERE FIDE_USUARIO_ID = p_usuario_id;
END;
/
--Eliminar Usuario
CREATE OR REPLACE PROCEDURE FIDE_ELIMINAR_USUARIO(
    p_usuario_id IN NUMBER
) IS
BEGIN
    DELETE FROM FIDE_USUARIOS_TB
    WHERE FIDE_USUARIO_ID = p_usuario_id;
END;
/

--9. Paquete de Autenticación 

CREATE SEQUENCE fide_usuarios_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE PACKAGE fide_autenticacion_pkg AS
    PROCEDURE fide_validar_credenciales_proc (
        p_nombre_usuario IN VARCHAR2,
        p_contrasena     IN VARCHAR2,
        p_resultado      OUT VARCHAR2
    );

    PROCEDURE fide_registrar_usuario_proc (
        p_nombre_usuario IN VARCHAR2,
        p_contrasena     IN VARCHAR2,
        p_rol_id         IN NUMBER
    );

    PROCEDURE fide_cambiar_contrasena_proc (
        p_nombre_usuario    IN VARCHAR2,
        p_contrasena_actual IN VARCHAR2,
        p_contrasena_nueva  IN VARCHAR2
    );

    PROCEDURE fide_recuperar_contrasena_proc (
        p_nombre_usuario   IN VARCHAR2,
        p_nueva_contrasena IN VARCHAR2
    );

    PROCEDURE fide_bloquear_usuario_proc (
        p_nombre_usuario IN VARCHAR2
    );

    PROCEDURE fide_desbloquear_usuario_proc (
        p_nombre_usuario IN VARCHAR2
    );

END fide_autenticacion_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_autenticacion_pkg AS

    PROCEDURE fide_validar_credenciales_proc (
        p_nombre_usuario IN VARCHAR2,
        p_contrasena     IN VARCHAR2,
        p_resultado      OUT VARCHAR2
    ) IS

        v_usuario_id    fide_usuarios_tb.fide_usuario_id%TYPE;
        v_estado        fide_usuarios_tb.fide_estado_usuario%TYPE;
        v_contrasena_bd fide_usuarios_tb.fide_contrasena%TYPE;
        v_intentos      NUMBER;
    BEGIN
        SELECT
            fide_usuario_id,
            fide_contrasena,
            fide_estado_usuario,
            fide_intentos_fallidos
        INTO
            v_usuario_id,
            v_contrasena_bd,
            v_estado,
            v_intentos
        FROM
            fide_usuarios_tb
        WHERE
            fide_nombre_usuario = p_nombre_usuario;

        IF v_estado = 'BLOQUEADO' THEN
            p_resultado := 'USUARIO BLOQUEADO';
            RETURN;
        END IF;
        IF v_contrasena_bd = p_contrasena THEN
            UPDATE fide_usuarios_tb
            SET
                fide_intentos_fallidos = 0,
                fide_ultima_conexion = systimestamp
            WHERE
                fide_usuario_id = v_usuario_id;

            p_resultado := 'AUTENTICADO';
        ELSE
            v_intentos := v_intentos + 1;
            IF v_intentos >= 3 THEN
                UPDATE fide_usuarios_tb
                SET
                    fide_estado_usuario = 'BLOQUEADO',
                    fide_intentos_fallidos = v_intentos
                WHERE
                    fide_usuario_id = v_usuario_id;

                p_resultado := 'USUARIO BLOQUEADO POR INTENTOS';
            ELSE
                UPDATE fide_usuarios_tb
                SET
                    fide_intentos_fallidos = v_intentos
                WHERE
                    fide_usuario_id = v_usuario_id;

                p_resultado := 'CREDENCIALES INVALIDAS';
            END IF;

        END IF;

    EXCEPTION
        WHEN no_data_found THEN
            p_resultado := 'USUARIO NO EXISTE';
        WHEN OTHERS THEN
            p_resultado := 'ERROR: ' || sqlerrm;
    END;

    PROCEDURE fide_registrar_usuario_proc (
        p_nombre_usuario IN VARCHAR2,
        p_contrasena     IN VARCHAR2,
        p_rol_id         IN NUMBER
    ) IS
    BEGIN
        INSERT INTO fide_usuarios_tb (
            fide_usuario_id,
            fide_nombre_usuario,
            fide_contrasena,
            fide_rol_id
        ) VALUES ( fide_usuarios_seq.NEXTVAL,
                   p_nombre_usuario,
                   p_contrasena,
                   p_rol_id );

    END;

    PROCEDURE fide_cambiar_contrasena_proc (
        p_nombre_usuario    IN VARCHAR2,
        p_contrasena_actual IN VARCHAR2,
        p_contrasena_nueva  IN VARCHAR2
    ) IS
        v_contrasena_actual VARCHAR2(100);
    BEGIN
        SELECT
            fide_contrasena
        INTO v_contrasena_actual
        FROM
            fide_usuarios_tb
        WHERE
            fide_nombre_usuario = p_nombre_usuario;

        IF v_contrasena_actual = p_contrasena_actual THEN
            UPDATE fide_usuarios_tb
            SET
                fide_contrasena = p_contrasena_nueva
            WHERE
                fide_nombre_usuario = p_nombre_usuario;

        ELSE
            raise_application_error(-20002, 'Contraseña actual incorrecta.');
        END IF;

    END;

    PROCEDURE fide_recuperar_contrasena_proc (
        p_nombre_usuario   IN VARCHAR2,
        p_nueva_contrasena IN VARCHAR2
    ) IS
    BEGIN
        UPDATE fide_usuarios_tb
        SET
            fide_contrasena = p_nueva_contrasena,
            fide_intentos_fallidos = 0,
            fide_estado_usuario = 'ACTIVO'
        WHERE
            fide_nombre_usuario = p_nombre_usuario;

    END;

    PROCEDURE fide_bloquear_usuario_proc (
        p_nombre_usuario IN VARCHAR2
    ) IS
    BEGIN
        UPDATE fide_usuarios_tb
        SET
            fide_estado_usuario = 'BLOQUEADO'
        WHERE
            fide_nombre_usuario = p_nombre_usuario;

    END;

    PROCEDURE fide_desbloquear_usuario_proc (
        p_nombre_usuario IN VARCHAR2
    ) IS
    BEGIN
        UPDATE fide_usuarios_tb
        SET
            fide_estado_usuario = 'ACTIVO',
            fide_intentos_fallidos = 0
        WHERE
            fide_nombre_usuario = p_nombre_usuario;

    END;

END fide_autenticacion_pkg;
/

--10. Paquete de Pacientes

CREATE OR REPLACE PACKAGE fide_pacientes_pkg AS
    PROCEDURE fide_registrar_paciente_proc (
        p_cedula    IN VARCHAR2,
        p_nombre    IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_telefono  IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_correo    IN VARCHAR2,
        p_estado_id IN NUMBER,
        p_deuda     IN NUMBER
    );

    PROCEDURE fide_actualizar_paciente_proc (
        p_cedula    IN VARCHAR2,
        p_nombre    IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_telefono  IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_correo    IN VARCHAR2,
        p_estado_id IN NUMBER,
        p_deuda     IN NUMBER
    );

    PROCEDURE fide_eliminar_paciente_proc (
        p_cedula IN VARCHAR2
    );

    PROCEDURE fide_buscar_paciente_proc (
        p_cedula IN VARCHAR2
    );

    PROCEDURE fide_obtener_historial_medico_proc (
        p_cedula IN VARCHAR2
    );

    PROCEDURE fide_registrar_historial_medico_proc (
        p_cedula_paciente IN VARCHAR2,
        p_cedula_empleado IN VARCHAR2,
        p_diagnostico     IN VARCHAR2,
        p_tratamiento     IN VARCHAR2,
        p_observaciones   IN VARCHAR2
    );

END fide_pacientes_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_pacientes_pkg AS

    PROCEDURE fide_registrar_paciente_proc (
        p_cedula    IN VARCHAR2,
        p_nombre    IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_telefono  IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_correo    IN VARCHAR2,
        p_estado_id IN NUMBER,
        p_deuda     IN NUMBER
    ) IS
    BEGIN
        INSERT INTO fide_pacientes_tb (
            fide_paciente_cedula,
            fide_nombre_paciente,
            fide_apellidos_paciente,
            fide_telefono_paciente,
            fide_direccion_paciente,
            fide_correo_paciente,
            fide_estado_paciente_id,
            fide_deuda_paciente
        ) VALUES ( p_cedula,
                   p_nombre,
                   p_apellidos,
                   p_telefono,
                   p_direccion,
                   p_correo,
                   p_estado_id,
                   p_deuda );

    END;

    PROCEDURE fide_actualizar_paciente_proc (
        p_cedula    IN VARCHAR2,
        p_nombre    IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_telefono  IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_correo    IN VARCHAR2,
        p_estado_id IN NUMBER,
        p_deuda     IN NUMBER
    ) IS
    BEGIN
        UPDATE fide_pacientes_tb
        SET
            fide_nombre_paciente = p_nombre,
            fide_apellidos_paciente = p_apellidos,
            fide_telefono_paciente = p_telefono,
            fide_direccion_paciente = p_direccion,
            fide_correo_paciente = p_correo,
            fide_estado_paciente_id = p_estado_id,
            fide_deuda_paciente = p_deuda
        WHERE
            fide_paciente_cedula = p_cedula;

    END;

    PROCEDURE fide_eliminar_paciente_proc (
        p_cedula IN VARCHAR2
    ) IS
    BEGIN
        DELETE FROM fide_pacientes_tb
        WHERE
            fide_paciente_cedula = p_cedula;

    END;

    PROCEDURE fide_buscar_paciente_proc (
        p_cedula IN VARCHAR2
    ) IS

        v_nombre    fide_pacientes_tb.fide_nombre_paciente%TYPE;
        v_apellidos fide_pacientes_tb.fide_apellidos_paciente%TYPE;
        v_telefono  fide_pacientes_tb.fide_telefono_paciente%TYPE;
        v_direccion fide_pacientes_tb.fide_direccion_paciente%TYPE;
        v_correo    fide_pacientes_tb.fide_correo_paciente%TYPE;
        v_estado_id fide_pacientes_tb.fide_estado_paciente_id%TYPE;
        v_deuda     fide_pacientes_tb.fide_deuda_paciente%TYPE;
    BEGIN
        SELECT
            fide_nombre_paciente,
            fide_apellidos_paciente,
            fide_telefono_paciente,
            fide_direccion_paciente,
            fide_correo_paciente,
            fide_estado_paciente_id,
            fide_deuda_paciente
        INTO
            v_nombre,
            v_apellidos,
            v_telefono,
            v_direccion,
            v_correo,
            v_estado_id,
            v_deuda
        FROM
            fide_pacientes_tb
        WHERE
            fide_paciente_cedula = p_cedula;

        dbms_output.put_line('Nombre: ' || v_nombre);
        dbms_output.put_line('Apellidos: ' || v_apellidos);
        dbms_output.put_line('Teléfono: ' || v_telefono);
        dbms_output.put_line('Dirección: ' || v_direccion);
        dbms_output.put_line('Correo: ' || v_correo);
        dbms_output.put_line('Estado ID: ' || v_estado_id);
        dbms_output.put_line('Deuda: ' || v_deuda);
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Paciente no encontrado.');
    END;

    PROCEDURE fide_obtener_historial_medico_proc (
        p_cedula IN VARCHAR2
    ) IS
    BEGIN
        FOR r IN (
            SELECT
                fide_fecha_registro,
                fide_diagnostico,
                fide_tratamiento,
                fide_observaciones
            FROM
                fide_historial_medico_tb
            WHERE
                fide_paciente_cedula = p_cedula
            ORDER BY
                fide_fecha_registro DESC
        ) LOOP
            dbms_output.put_line('Fecha: ' || r.fide_fecha_registro);
            dbms_output.put_line('Diagnóstico: ' || r.fide_diagnostico);
            dbms_output.put_line('Tratamiento: ' || r.fide_tratamiento);
            dbms_output.put_line('Observaciones: ' || r.fide_observaciones);
            dbms_output.put_line('------------------------------');
        END LOOP;
    END;

    PROCEDURE fide_registrar_historial_medico_proc (
        p_cedula_paciente IN VARCHAR2,
        p_cedula_empleado IN VARCHAR2,
        p_diagnostico     IN VARCHAR2,
        p_tratamiento     IN VARCHAR2,
        p_observaciones   IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_historial_medico_tb (
            fide_paciente_cedula,
            fide_empleado_cedula,
            fide_diagnostico,
            fide_tratamiento,
            fide_observaciones
        ) VALUES ( p_cedula_paciente,
                   p_cedula_empleado,
                   p_diagnostico,
                   p_tratamiento,
                   p_observaciones );

    END;

END fide_pacientes_pkg;
/

--11. Paquete de Citas

CREATE OR REPLACE PACKAGE fide_citas_pkg IS
    PROCEDURE fide_agendar_cita_proc (
        p_paciente_cedula IN fide_pacientes_tb.fide_paciente_cedula%TYPE,
        p_empleado_cedula IN fide_empleados_tb.fide_empleado_cedula%TYPE,
        p_fecha_cita      IN TIMESTAMP,
        p_sala_id         IN fide_salas_tb.fide_sala_id%TYPE,
        p_motivo_cita     IN fide_citas_tb.fide_motivo_cita%TYPE
    );

    PROCEDURE fide_cancelar_cita_proc (
        p_cita_id IN fide_citas_tb.fide_cita_id%TYPE
    );

    PROCEDURE fide_reprogramar_cita_proc (
        p_cita_id     IN fide_citas_tb.fide_cita_id%TYPE,
        p_nueva_fecha IN TIMESTAMP
    );

    PROCEDURE fide_listar_citas_paciente_proc (
        p_paciente_cedula IN fide_pacientes_tb.fide_paciente_cedula%TYPE
    );

    PROCEDURE fide_listar_citas_empleado_proc (
        p_empleado_cedula IN fide_empleados_tb.fide_empleado_cedula%TYPE
    );

    PROCEDURE fide_verificar_disponibilidad_cita_proc (
        p_sala_id    IN fide_salas_tb.fide_sala_id%TYPE,
        p_fecha_cita IN TIMESTAMP
    );

END fide_citas_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_citas_pkg IS

    PROCEDURE fide_agendar_cita_proc (
        p_paciente_cedula IN fide_pacientes_tb.fide_paciente_cedula%TYPE,
        p_empleado_cedula IN fide_empleados_tb.fide_empleado_cedula%TYPE,
        p_fecha_cita      IN TIMESTAMP,
        p_sala_id         IN fide_salas_tb.fide_sala_id%TYPE,
        p_motivo_cita     IN fide_citas_tb.fide_motivo_cita%TYPE
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_citas_tb
        WHERE
                fide_sala_id = p_sala_id
            AND fide_fecha_cita = p_fecha_cita;

        IF v_count > 0 THEN
            raise_application_error(-20002, 'La sala no está disponible en la fecha y hora especificadas.');
        END IF;
        INSERT INTO fide_citas_tb (
            fide_cita_id,
            fide_paciente_cedula,
            fide_empleado_cedula,
            fide_fecha_cita,
            fide_sala_id,
            fide_motivo_cita
        ) VALUES ( fide_seq_citas.NEXTVAL,
                   p_paciente_cedula,
                   p_empleado_cedula,
                   p_fecha_cita,
                   p_sala_id,
                   p_motivo_cita );

    END;

    PROCEDURE fide_cancelar_cita_proc (
        p_cita_id IN fide_citas_tb.fide_cita_id%TYPE
    ) IS
    BEGIN
        DELETE FROM fide_citas_tb
        WHERE
            fide_cita_id = p_cita_id;

    END;

    PROCEDURE fide_reprogramar_cita_proc (
        p_cita_id     IN fide_citas_tb.fide_cita_id%TYPE,
        p_nueva_fecha IN TIMESTAMP
    ) IS
        v_sala_id fide_citas_tb.fide_sala_id%TYPE;
        v_count   NUMBER;
    BEGIN
        SELECT
            fide_sala_id
        INTO v_sala_id
        FROM
            fide_citas_tb
        WHERE
            fide_cita_id = p_cita_id;

        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_citas_tb
        WHERE
                fide_sala_id = v_sala_id
            AND fide_fecha_cita = p_nueva_fecha;

        IF v_count > 0 THEN
            raise_application_error(-20003, 'La nueva fecha ya tiene una cita programada en esa sala.');
        END IF;
        UPDATE fide_citas_tb
        SET
            fide_fecha_cita = p_nueva_fecha
        WHERE
            fide_cita_id = p_cita_id;

    END;

    PROCEDURE fide_listar_citas_paciente_proc (
        p_paciente_cedula IN fide_pacientes_tb.fide_paciente_cedula%TYPE
    ) IS

        CURSOR c_citas IS
        SELECT
            fide_cita_id,
            fide_fecha_cita,
            fide_motivo_cita
        FROM
            fide_citas_tb
        WHERE
            fide_paciente_cedula = p_paciente_cedula
        ORDER BY
            fide_fecha_cita;

        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_citas_tb
        WHERE
            fide_paciente_cedula = p_paciente_cedula;

        IF v_count = 0 THEN
            dbms_output.put_line(' El paciente no tiene citas agendadas.');
        ELSE
            FOR cita IN c_citas LOOP
                dbms_output.put_line(' Cita ID: ' || cita.fide_cita_id);
                dbms_output.put_line('   Fecha:   '
                                     || to_char(cita.fide_fecha_cita, 'DD-MM-YYYY HH24:MI'));
                dbms_output.put_line('   Motivo:  ' || cita.fide_motivo_cita);
                dbms_output.put_line('---------------------------');
            END LOOP;
        END IF;

    END;

    PROCEDURE fide_listar_citas_empleado_proc (
        p_empleado_cedula IN fide_empleados_tb.fide_empleado_cedula%TYPE
    ) IS

        CURSOR c_citas IS
        SELECT
            fide_cita_id,
            fide_fecha_cita,
            fide_motivo_cita
        FROM
            fide_citas_tb
        WHERE
            fide_empleado_cedula = p_empleado_cedula
        ORDER BY
            fide_fecha_cita;

        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_citas_tb
        WHERE
            fide_empleado_cedula = p_empleado_cedula;

        IF v_count = 0 THEN
            dbms_output.put_line(' El empleado no tiene citas agendadas.');
        ELSE
            FOR cita IN c_citas LOOP
                dbms_output.put_line('   Cita ID: ' || cita.fide_cita_id);
                dbms_output.put_line('   Fecha:   '
                                     || to_char(cita.fide_fecha_cita, 'DD-MM-YYYY HH24:MI'));
                dbms_output.put_line('   Motivo:  ' || cita.fide_motivo_cita);
                dbms_output.put_line('---------------------------');
            END LOOP;
        END IF;

    END;

    PROCEDURE fide_verificar_disponibilidad_cita_proc (
        p_sala_id    IN fide_salas_tb.fide_sala_id%TYPE,
        p_fecha_cita IN TIMESTAMP
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_citas_tb
        WHERE
                fide_sala_id = p_sala_id
            AND fide_fecha_cita = p_fecha_cita;

        IF v_count > 0 THEN
            dbms_output.put_line('La sala NO está disponible.');
        ELSE
            dbms_output.put_line('La sala está disponible.');
        END IF;

    END;

END fide_citas_pkg;
/

--12. Paquete de Medicamentos
CREATE OR REPLACE PACKAGE fide_medicamentos_pkg AS
    PROCEDURE fide_registrar_medicamento_proc (
        p_nombre   IN fide_medicamentos_tb.fide_nombre_medicamento%TYPE,
        p_precio   IN fide_medicamentos_tb.fide_precio_medicamento%TYPE,
        p_cantidad IN fide_medicamentos_tb.fide_cantidad_medicamento%TYPE,
        p_info     IN fide_medicamentos_tb.fide_informacion_medicamento%TYPE
    );

    PROCEDURE fide_actualizar_medicamento_proc (
        p_id       IN fide_medicamentos_tb.fide_medicamento_id%TYPE,
        p_nombre   IN fide_medicamentos_tb.fide_nombre_medicamento%TYPE,
        p_precio   IN fide_medicamentos_tb.fide_precio_medicamento%TYPE,
        p_cantidad IN fide_medicamentos_tb.fide_cantidad_medicamento%TYPE,
        p_info     IN fide_medicamentos_tb.fide_informacion_medicamento%TYPE
    );

    PROCEDURE fide_eliminar_medicamento_proc (
        p_id IN fide_medicamentos_tb.fide_medicamento_id%TYPE
    );

    PROCEDURE fide_decrementar_stock_proc (
        p_id       IN fide_medicamentos_tb.fide_medicamento_id%TYPE,
        p_paciente IN fide_pacientes_tb.fide_paciente_cedula%TYPE,
        p_cantidad IN NUMBER
    );

    PROCEDURE fide_incrementar_stock_proc (
        p_id       IN fide_medicamentos_tb.fide_medicamento_id%TYPE,
        p_paciente IN fide_pacientes_tb.fide_paciente_cedula%TYPE,
        p_cantidad IN NUMBER
    );

    PROCEDURE fide_verificar_stock_minimo_proc (
        p_id     IN fide_medicamentos_tb.fide_medicamento_id%TYPE,
        p_minimo IN NUMBER DEFAULT 50
    );

END fide_medicamentos_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_medicamentos_pkg AS

    PROCEDURE fide_registrar_medicamento_proc (
        p_nombre   IN fide_medicamentos_tb.fide_nombre_medicamento%TYPE,
        p_precio   IN fide_medicamentos_tb.fide_precio_medicamento%TYPE,
        p_cantidad IN fide_medicamentos_tb.fide_cantidad_medicamento%TYPE,
        p_info     IN fide_medicamentos_tb.fide_informacion_medicamento%TYPE
    ) IS
    BEGIN
        INSERT INTO fide_medicamentos_tb (
            fide_nombre_medicamento,
            fide_precio_medicamento,
            fide_cantidad_medicamento,
            fide_informacion_medicamento
        ) VALUES ( p_nombre,
                   p_precio,
                   p_cantidad,
                   p_info );

        dbms_output.put_line('Medicamento registrado correctamente.');
    END;

    PROCEDURE fide_actualizar_medicamento_proc (
        p_id       IN fide_medicamentos_tb.fide_medicamento_id%TYPE,
        p_nombre   IN fide_medicamentos_tb.fide_nombre_medicamento%TYPE,
        p_precio   IN fide_medicamentos_tb.fide_precio_medicamento%TYPE,
        p_cantidad IN fide_medicamentos_tb.fide_cantidad_medicamento%TYPE,
        p_info     IN fide_medicamentos_tb.fide_informacion_medicamento%TYPE
    ) IS
    BEGIN
        UPDATE fide_medicamentos_tb
        SET
            fide_nombre_medicamento = p_nombre,
            fide_precio_medicamento = p_precio,
            fide_cantidad_medicamento = p_cantidad,
            fide_informacion_medicamento = p_info
        WHERE
            fide_medicamento_id = p_id;

        dbms_output.put_line('Medicamento actualizado correctamente.');
    END;

    PROCEDURE fide_eliminar_medicamento_proc (
        p_id IN fide_medicamentos_tb.fide_medicamento_id%TYPE
    ) IS
    BEGIN
        DELETE FROM fide_medicamentos_tb
        WHERE
            fide_medicamento_id = p_id;

        dbms_output.put_line('Medicamento eliminado correctamente.');
    END;

    PROCEDURE fide_decrementar_stock_proc (
        p_id       IN fide_medicamentos_tb.fide_medicamento_id%TYPE,
        p_paciente IN fide_pacientes_tb.fide_paciente_cedula%TYPE,
        p_cantidad IN NUMBER
    ) IS
        v_stock NUMBER;
    BEGIN
        SELECT
            fide_cantidad_medicamento
        INTO v_stock
        FROM
            fide_medicamentos_tb
        WHERE
            fide_medicamento_id = p_id;

        IF v_stock < p_cantidad THEN
            raise_application_error(-20010, 'Stock insuficiente.');
        END IF;
        UPDATE fide_medicamentos_tb
        SET
            fide_cantidad_medicamento = fide_cantidad_medicamento - p_cantidad
        WHERE
            fide_medicamento_id = p_id;

        INSERT INTO fide_medicamentos_reservados_tb (
            fide_paciente_cedula,
            fide_medicamento_id,
            fide_cantidad_medicamento
        ) VALUES ( p_paciente,
                   p_id,
                   p_cantidad );

        dbms_output.put_line('Stock actualizado y medicamento reservado.');
    END;

    PROCEDURE fide_incrementar_stock_proc (
        p_id       IN fide_medicamentos_tb.fide_medicamento_id%TYPE,
        p_paciente IN fide_pacientes_tb.fide_paciente_cedula%TYPE,
        p_cantidad IN NUMBER
    ) IS
        v_reserva_id NUMBER;
        v_reservado  NUMBER;
    BEGIN
        SELECT
            fide_reserva_id,
            fide_cantidad_medicamento
        INTO
            v_reserva_id,
            v_reservado
        FROM
            fide_medicamentos_reservados_tb
        WHERE
                fide_medicamento_id = p_id
            AND fide_paciente_cedula = p_paciente
        FETCH FIRST 1 ROWS ONLY;

        IF p_cantidad >= v_reservado THEN
            DELETE FROM fide_medicamentos_reservados_tb
            WHERE
                fide_reserva_id = v_reserva_id;

        ELSE
            UPDATE fide_medicamentos_reservados_tb
            SET
                fide_cantidad_medicamento = fide_cantidad_medicamento - p_cantidad
            WHERE
                fide_reserva_id = v_reserva_id;

        END IF;

        UPDATE fide_medicamentos_tb
        SET
            fide_cantidad_medicamento = fide_cantidad_medicamento + p_cantidad
        WHERE
            fide_medicamento_id = p_id;

        dbms_output.put_line('Stock actualizado y reserva ajustada.');
    EXCEPTION
        WHEN no_data_found THEN
            UPDATE fide_medicamentos_tb
            SET
                fide_cantidad_medicamento = fide_cantidad_medicamento + p_cantidad
            WHERE
                fide_medicamento_id = p_id;

            dbms_output.put_line('Stock actualizado.');
    END;

    PROCEDURE fide_verificar_stock_minimo_proc (
        p_id     IN fide_medicamentos_tb.fide_medicamento_id%TYPE,
        p_minimo IN NUMBER DEFAULT 50
    ) IS
        v_stock NUMBER;
    BEGIN
        SELECT
            fide_cantidad_medicamento
        INTO v_stock
        FROM
            fide_medicamentos_tb
        WHERE
            fide_medicamento_id = p_id;

        IF v_stock < p_minimo THEN
            dbms_output.put_line('Stock actual ('
                                 || v_stock
                                 || ') por debajo del mínimo requerido ('
                                 || p_minimo
                                 || ').');

        ELSE
            dbms_output.put_line('Stock suficiente: '
                                 || v_stock
                                 || ' unidades disponibles.');
        END IF;

    END;

END fide_medicamentos_pkg;
/

--13. Paquete de Salas

CREATE OR REPLACE PACKAGE fide_salas_pkg IS
    PROCEDURE fide_registrar_sala_proc (
        p_capacidad      IN fide_salas_tb.fide_capacidad_sala%TYPE,
        p_tipo_sala_id   IN fide_salas_tb.fide_tipo_sala_id%TYPE,
        p_estado_sala_id IN fide_salas_tb.fide_estado_sala_id%TYPE,
        p_precio_hora    IN fide_salas_tb.fide_precio_hora_sala%TYPE
    );

    PROCEDURE fide_actualizar_sala_proc (
        p_sala_id        IN fide_salas_tb.fide_sala_id%TYPE,
        p_capacidad      IN fide_salas_tb.fide_capacidad_sala%TYPE,
        p_tipo_sala_id   IN fide_salas_tb.fide_tipo_sala_id%TYPE,
        p_estado_sala_id IN fide_salas_tb.fide_estado_sala_id%TYPE,
        p_precio_hora    IN fide_salas_tb.fide_precio_hora_sala%TYPE
    );

    PROCEDURE fide_eliminar_sala_proc (
        p_sala_id IN fide_salas_tb.fide_sala_id%TYPE
    );

    PROCEDURE fide_alquilar_sala_proc (
        p_sala_id       IN fide_salas_tb.fide_sala_id%TYPE,
        p_doctor_nombre IN fide_alquileres_tb.fide_doctor_alquiler%TYPE,
        p_fecha_inicio  IN fide_alquileres_tb.fide_fecha_inicio_alquiler%TYPE,
        p_fecha_fin     IN fide_alquileres_tb.fide_fecha_fin_alquiler%TYPE
    );

    PROCEDURE fide_liberar_sala_proc (
        p_alquiler_id IN fide_alquileres_tb.fide_alquiler_id%TYPE
    );

    PROCEDURE fide_verificar_disponibilidad_sala_proc (
        p_sala_id      IN fide_salas_tb.fide_sala_id%TYPE,
        p_fecha_inicio IN TIMESTAMP,
        p_fecha_fin    IN TIMESTAMP
    );

END fide_salas_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_salas_pkg IS

    PROCEDURE fide_registrar_sala_proc (
        p_capacidad      IN fide_salas_tb.fide_capacidad_sala%TYPE,
        p_tipo_sala_id   IN fide_salas_tb.fide_tipo_sala_id%TYPE,
        p_estado_sala_id IN fide_salas_tb.fide_estado_sala_id%TYPE,
        p_precio_hora    IN fide_salas_tb.fide_precio_hora_sala%TYPE
    ) IS
    BEGIN
        INSERT INTO fide_salas_tb (
            fide_capacidad_sala,
            fide_tipo_sala_id,
            fide_estado_sala_id,
            fide_precio_hora_sala
        ) VALUES ( p_capacidad,
                   p_tipo_sala_id,
                   p_estado_sala_id,
                   p_precio_hora );

        dbms_output.put_line('Sala registrada correctamente.');
    END;

    PROCEDURE fide_actualizar_sala_proc (
        p_sala_id        IN fide_salas_tb.fide_sala_id%TYPE,
        p_capacidad      IN fide_salas_tb.fide_capacidad_sala%TYPE,
        p_tipo_sala_id   IN fide_salas_tb.fide_tipo_sala_id%TYPE,
        p_estado_sala_id IN fide_salas_tb.fide_estado_sala_id%TYPE,
        p_precio_hora    IN fide_salas_tb.fide_precio_hora_sala%TYPE
    ) IS
    BEGIN
        UPDATE fide_salas_tb
        SET
            fide_capacidad_sala = p_capacidad,
            fide_tipo_sala_id = p_tipo_sala_id,
            fide_estado_sala_id = p_estado_sala_id,
            fide_precio_hora_sala = p_precio_hora
        WHERE
            fide_sala_id = p_sala_id;

        dbms_output.put_line('Sala actualizada correctamente.');
    END fide_actualizar_sala_proc;

    PROCEDURE fide_eliminar_sala_proc (
        p_sala_id IN fide_salas_tb.fide_sala_id%TYPE
    ) IS
    BEGIN
        DELETE FROM fide_salas_tb
        WHERE
            fide_sala_id = p_sala_id;

        dbms_output.put_line('Sala eliminada correctamente.');
    END;

    PROCEDURE fide_verificar_disponibilidad_sala_proc (
        p_sala_id      IN fide_salas_tb.fide_sala_id%TYPE,
        p_fecha_inicio IN TIMESTAMP,
        p_fecha_fin    IN TIMESTAMP
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_alquileres_tb
        WHERE
                fide_sala_id = p_sala_id
            AND ( ( p_fecha_inicio BETWEEN fide_fecha_inicio_alquiler AND nvl(fide_fecha_fin_alquiler, systimestamp) )
                  OR ( p_fecha_fin BETWEEN fide_fecha_inicio_alquiler AND nvl(fide_fecha_fin_alquiler, systimestamp) )
                  OR ( fide_fecha_inicio_alquiler BETWEEN p_fecha_inicio AND p_fecha_fin ) );

        IF v_count > 0 THEN
            raise_application_error(-20002, 'La sala no está disponible en la fecha y hora especificadas.');
        ELSE
            dbms_output.put_line('La sala está disponible');
        END IF;

    END;

    PROCEDURE fide_alquilar_sala_proc (
        p_sala_id       IN fide_salas_tb.fide_sala_id%TYPE,
        p_doctor_nombre IN fide_alquileres_tb.fide_doctor_alquiler%TYPE,
        p_fecha_inicio  IN fide_alquileres_tb.fide_fecha_inicio_alquiler%TYPE,
        p_fecha_fin     IN fide_alquileres_tb.fide_fecha_fin_alquiler%TYPE
    ) IS
        v_precio_hora fide_salas_tb.fide_precio_hora_sala%TYPE;
        v_total       NUMBER;
    BEGIN
        fide_verificar_disponibilidad_sala_proc(p_sala_id, p_fecha_inicio, p_fecha_fin);
        SELECT
            fide_precio_hora_sala
        INTO v_precio_hora
        FROM
            fide_salas_tb
        WHERE
            fide_sala_id = p_sala_id;

        v_total := v_precio_hora * ( extract(HOUR FROM ( p_fecha_fin - p_fecha_inicio )) + extract(MINUTE FROM ( p_fecha_fin - p_fecha_inicio
        )) / 60 );

        INSERT INTO fide_alquileres_tb (
            fide_sala_id,
            fide_doctor_alquiler,
            fide_fecha_inicio_alquiler,
            fide_fecha_fin_alquiler,
            fide_total_alquiler
        ) VALUES ( p_sala_id,
                   p_doctor_nombre,
                   p_fecha_inicio,
                   p_fecha_fin,
                   v_total );

        UPDATE fide_salas_tb
        SET
            fide_estado_sala_id = 2
        WHERE
            fide_sala_id = p_sala_id;

        dbms_output.put_line('Sala alquilada con éxito. Total: ₡' || v_total);
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error al alquilar sala: ' || sqlerrm);
    END;

    PROCEDURE fide_liberar_sala_proc (
        p_alquiler_id IN fide_alquileres_tb.fide_alquiler_id%TYPE
    ) IS
        v_sala_id fide_salas_tb.fide_sala_id%TYPE;
    BEGIN
        SELECT
            fide_sala_id
        INTO v_sala_id
        FROM
            fide_alquileres_tb
        WHERE
            fide_alquiler_id = p_alquiler_id;

        UPDATE fide_alquileres_tb
        SET
            fide_fecha_fin_alquiler = systimestamp
        WHERE
            fide_alquiler_id = p_alquiler_id;

        UPDATE fide_salas_tb
        SET
            fide_estado_sala_id = 1
        WHERE
            fide_sala_id = v_sala_id;

        dbms_output.put_line('Sala liberada correctamente.');
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('No se encontró el alquiler con ID: ' || p_alquiler_id);
        WHEN OTHERS THEN
            dbms_output.put_line('Error al liberar sala: ' || sqlerrm);
    END;

END fide_salas_pkg;
/

--14. Paquete de Facturación

--- Actualizacion de tabla Facturas para que permita el estado "Anulada"

ALTER TABLE fide_facturas_tb DROP CONSTRAINT sys_c008658;

ALTER TABLE fide_facturas_tb
    ADD CONSTRAINT chk_estado_factura
        CHECK ( fide_estado_factura IN ( 'COBRADO', 'PENDIENTE', 'ANULADA' ) );

--- Actualizacion de tabla Citas para que permita el estado de la cita

ALTER TABLE fide_citas_tb ADD fide_estado_cita VARCHAR2(20);

ALTER TABLE fide_citas_tb
    ADD CONSTRAINT chk_fide_estado_cita
        CHECK ( fide_estado_cita IN ( 'ACTIVA', 'COMPLETADA', 'CANCELADA' ) );

ALTER TABLE fide_citas_tb MODIFY
    fide_estado_cita DEFAULT 'ACTIVA';

    
--Paquete de Facturacion---
--Evita facturas duplicadas activas
--Actualiza el inventario de medicamentos una vez completados
--Actualiza el estado de las citas una vez pagadas
--Anula facturas

CREATE OR REPLACE PACKAGE fide_facturacion_pkg AS
    PROCEDURE fide_generar_factura_proc (
        p_paciente_cedula IN VARCHAR2
    );

    PROCEDURE fide_pagar_factura_proc (
        p_factura_id      IN NUMBER,
        p_metodo_pago     IN VARCHAR2,
        p_monto_pagado    IN NUMBER,
        p_referencia_pago IN VARCHAR2 DEFAULT NULL
    );

    PROCEDURE fide_actualizar_recursos_proc (
        p_factura_id NUMBER
    );

    PROCEDURE fide_anular_factura_proc (
        p_factura_id NUMBER
    );

    PROCEDURE fide_generar_recibo_proc (
        p_factura_id      NUMBER,
        p_metodo_pago     VARCHAR2,
        p_monto_pagado    NUMBER,
        p_referencia_pago VARCHAR2 := NULL
    );

    PROCEDURE fide_calcular_total_factura_proc (
        p_factura_id NUMBER
    );

    PROCEDURE fide_aplicar_descuento_proc (
        p_factura_id       NUMBER,
        p_codigo_descuento VARCHAR2
    );

END fide_facturacion_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_facturacion_pkg AS

    PROCEDURE fide_generar_factura_proc (
        p_paciente_cedula IN VARCHAR2
    ) IS

        v_factura_id        NUMBER;
        v_total             NUMBER := 0;
        v_medicamento_total NUMBER := 0;
        v_sala_total        NUMBER := 0;
        v_cantidad          NUMBER;
        v_factura_existente NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_factura_existente
        FROM
            fide_facturas_tb
        WHERE
                fide_paciente_cedula = p_paciente_cedula
            AND fide_estado_factura = 'PENDIENTE';

        IF v_factura_existente > 0 THEN
            dbms_output.put_line('ERROR: El paciente ya tiene una factura pendiente.');
            RETURN;
        END IF;
        INSERT INTO fide_facturas_tb (
            fide_paciente_cedula,
            fide_estado_factura,
            fide_total_factura
        ) VALUES ( p_paciente_cedula,
                   'PENDIENTE',
                   0 ) RETURNING fide_factura_id INTO v_factura_id;

        FOR med IN (
            SELECT
                r.fide_medicamento_id,
                r.fide_cantidad_medicamento,
                m.fide_precio_medicamento,
                m.fide_nombre_medicamento
            FROM
                     fide_medicamentos_reservados_tb r
                JOIN fide_medicamentos_tb m ON r.fide_medicamento_id = m.fide_medicamento_id
            WHERE
                    r.fide_paciente_cedula = p_paciente_cedula
                AND r.fide_estado_reserva = 'ACTIVA'
        ) LOOP
            v_cantidad := med.fide_cantidad_medicamento;
            v_medicamento_total := v_medicamento_total + ( v_cantidad * med.fide_precio_medicamento );
            INSERT INTO fide_detalles_facturas_tb (
                fide_factura_id,
                fide_descripcion_factura,
                fide_monto_factura
            ) VALUES ( v_factura_id,
                       'Medicamento: '
                       || med.fide_nombre_medicamento
                       || ' x'
                       || v_cantidad,
                       v_cantidad * med.fide_precio_medicamento );

        END LOOP;

        FOR s IN (
            SELECT
                c.fide_sala_id,
                SUM(s.fide_precio_hora_sala) AS total_precio
            FROM
                     fide_citas_tb c
                JOIN fide_salas_tb s ON c.fide_sala_id = s.fide_sala_id
            WHERE
                    c.fide_paciente_cedula = p_paciente_cedula
                AND c.fide_fecha_cita BETWEEN sysdate - 1 AND sysdate + 1
                AND c.fide_estado_cita = 'ACTIVA'
            GROUP BY
                c.fide_sala_id
        ) LOOP
            v_sala_total := v_sala_total + s.total_precio;
            INSERT INTO fide_detalles_facturas_tb (
                fide_factura_id,
                fide_descripcion_factura,
                fide_monto_factura
            ) VALUES ( v_factura_id,
                       'Uso de sala ID: ' || s.fide_sala_id,
                       s.total_precio );

        END LOOP;

        v_total := v_medicamento_total + v_sala_total;
        UPDATE fide_facturas_tb
        SET
            fide_total_factura = v_total
        WHERE
            fide_factura_id = v_factura_id;

        dbms_output.put_line('Factura generada correctamente.');
    END;

    PROCEDURE fide_pagar_factura_proc (
        p_factura_id      IN NUMBER,
        p_metodo_pago     IN VARCHAR2,
        p_monto_pagado    IN NUMBER,
        p_referencia_pago IN VARCHAR2 DEFAULT NULL
    ) IS
        v_total_factura   NUMBER;
        v_estado_factura  VARCHAR2(20);
        v_paciente_cedula VARCHAR2(20);
    BEGIN
        SELECT
            fide_total_factura,
            fide_estado_factura,
            fide_paciente_cedula
        INTO
            v_total_factura,
            v_estado_factura,
            v_paciente_cedula
        FROM
            fide_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        IF v_estado_factura = 'COBRADO' THEN
            dbms_output.put_line('La factura ya fue cobrada.');
            RETURN;
        ELSIF v_estado_factura = 'ANULADA' THEN
            dbms_output.put_line('No se puede pagar una factura anulada.');
            RETURN;
        END IF;

        IF p_monto_pagado < v_total_factura THEN
            dbms_output.put_line('Error: El monto pagado ('
                                 || p_monto_pagado
                                 || ') es menor al total de la factura ('
                                 || v_total_factura
                                 || ').');

            RETURN;
        END IF;

        UPDATE fide_facturas_tb
        SET
            fide_estado_factura = 'COBRADO'
        WHERE
            fide_factura_id = p_factura_id;

        INSERT INTO fide_recibos_tb (
            fide_factura_id,
            fide_metodo_pago,
            fide_monto_pagado,
            fide_referencia_pago
        ) VALUES ( p_factura_id,
                   p_metodo_pago,
                   p_monto_pagado,
                   p_referencia_pago );

        UPDATE fide_citas_tb
        SET
            fide_estado_cita = 'COMPLETADA'
        WHERE
                fide_paciente_cedula = v_paciente_cedula
            AND fide_estado_cita = 'ACTIVA';

        FOR med IN (
            SELECT
                r.fide_medicamento_id,
                r.fide_cantidad_medicamento
            FROM
                fide_medicamentos_reservados_tb r
            WHERE
                    r.fide_paciente_cedula = v_paciente_cedula
                AND r.fide_estado_reserva = 'ACTIVA'
        ) LOOP
            UPDATE fide_medicamentos_tb
            SET
                fide_cantidad_medicamento = fide_cantidad_medicamento - med.fide_cantidad_medicamento
            WHERE
                fide_medicamento_id = med.fide_medicamento_id;

            UPDATE fide_medicamentos_reservados_tb
            SET
                fide_estado_reserva = 'COMPLETADA'
            WHERE
                    fide_paciente_cedula = v_paciente_cedula
                AND fide_medicamento_id = med.fide_medicamento_id;

        END LOOP;

        dbms_output.put_line('Factura pagada exitosamente. Recursos actualizados.');
    END;

    PROCEDURE fide_actualizar_recursos_proc (
        p_factura_id NUMBER
    ) IS
        v_paciente_cedula VARCHAR2(20);
    BEGIN
        SELECT
            fide_paciente_cedula
        INTO v_paciente_cedula
        FROM
            fide_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        FOR med IN (
            SELECT
                r.fide_medicamento_id,
                r.fide_cantidad_medicamento
            FROM
                fide_medicamentos_reservados_tb r
            WHERE
                r.fide_paciente_cedula = v_paciente_cedula
        ) LOOP
            UPDATE fide_medicamentos_tb
            SET
                fide_cantidad_medicamento = fide_cantidad_medicamento + med.fide_cantidad_medicamento
            WHERE
                fide_medicamento_id = med.fide_medicamento_id;

            DELETE FROM fide_medicamentos_reservados_tb
            WHERE
                    fide_paciente_cedula = v_paciente_cedula
                AND fide_medicamento_id = med.fide_medicamento_id;

        END LOOP;

        FOR sala IN (
            SELECT
                c.fide_sala_id,
                c.fide_cita_id
            FROM
                fide_citas_tb c
            WHERE
                    c.fide_paciente_cedula = v_paciente_cedula
                AND c.fide_estado_cita = 'ACTIVA'
        ) LOOP
            UPDATE fide_citas_tb
            SET
                fide_estado_cita = 'COMPLETADA'
            WHERE
                fide_cita_id = sala.fide_cita_id;

        END LOOP;

        dbms_output.put_line('Recursos liberados correctamente.');
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error al liberar recursos: ' || sqlerrm);
    END fide_actualizar_recursos_proc;

    PROCEDURE fide_anular_factura_proc (
        p_factura_id NUMBER
    ) IS
        v_estado_factura VARCHAR2(20);
    BEGIN
        SELECT
            fide_estado_factura
        INTO v_estado_factura
        FROM
            fide_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        IF v_estado_factura = 'ANULADA' THEN
            dbms_output.put_line('La factura '
                                 || p_factura_id
                                 || ' ya está anulada.');
            RETURN;
        END IF;

        UPDATE fide_facturas_tb
        SET
            fide_estado_factura = 'ANULADA'
        WHERE
            fide_factura_id = p_factura_id;

        dbms_output.put_line('Factura '
                             || p_factura_id
                             || ' anulada correctamente.');
        COMMIT;
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Factura con ID '
                                 || p_factura_id
                                 || ' no encontrada.');
    END;

    PROCEDURE fide_generar_recibo_proc (
        p_factura_id      NUMBER,
        p_metodo_pago     VARCHAR2,
        p_monto_pagado    NUMBER,
        p_referencia_pago VARCHAR2 := NULL
    ) IS
    BEGIN
        INSERT INTO fide_recibos_tb (
            fide_factura_id,
            fide_metodo_pago,
            fide_monto_pagado,
            fide_referencia_pago
        ) VALUES ( p_factura_id,
                   p_metodo_pago,
                   p_monto_pagado,
                   p_referencia_pago );

        dbms_output.put_line('Recibo generado con éxito.');
    END;

    PROCEDURE fide_calcular_total_factura_proc (
        p_factura_id NUMBER
    ) IS

        v_total_medicamentos NUMBER := 0;
        v_total_salas        NUMBER := 0;
        v_total_bruto        NUMBER := 0;
        v_porcentaje_desc    NUMBER := 0;
        v_total_final        NUMBER := 0;
    BEGIN
        SELECT
            nvl(
                sum(fide_monto_factura),
                0
            )
        INTO v_total_medicamentos
        FROM
            fide_detalles_facturas_tb
        WHERE
                fide_factura_id = p_factura_id
            AND fide_descripcion_factura LIKE 'Medicamento:%';

        SELECT
            nvl(
                sum(fide_monto_factura),
                0
            )
        INTO v_total_salas
        FROM
            fide_detalles_facturas_tb
        WHERE
                fide_factura_id = p_factura_id
            AND fide_descripcion_factura LIKE 'Uso de sala%';

        v_total_bruto := v_total_medicamentos + v_total_salas;
        SELECT
            nvl(fide_porcentaje_aplicado, 0)
        INTO v_porcentaje_desc
        FROM
            fide_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        v_total_final := v_total_bruto - ( v_total_bruto * v_porcentaje_desc / 100 );
        UPDATE fide_facturas_tb
        SET
            fide_total_factura = v_total_final
        WHERE
            fide_factura_id = p_factura_id;

        dbms_output.put_line('---- Detalle de factura ID: '
                             || p_factura_id
                             || ' ----');
        dbms_output.put_line('Total Medicamentos: ' || v_total_medicamentos);
        dbms_output.put_line('Total Salas: ' || v_total_salas);
        dbms_output.put_line('Descuento aplicado: '
                             || v_porcentaje_desc
                             || '%');
        dbms_output.put_line('Total Final (con descuento): ' || v_total_final);
    END;

    PROCEDURE fide_aplicar_descuento_proc (
        p_factura_id       NUMBER,
        p_codigo_descuento VARCHAR2
    ) IS
        v_descuento_id NUMBER;
        v_porcentaje   NUMBER;
        v_total        NUMBER;
        v_nuevo_total  NUMBER;
    BEGIN
        SELECT
            fide_descuento_id,
            fide_porcentaje_descuento
        INTO
            v_descuento_id,
            v_porcentaje
        FROM
            fide_descuentos_tb
        WHERE
                fide_codigo_descuento = p_codigo_descuento
            AND fide_estado = 'ACTIVO'
            AND fide_fecha_fin > sysdate;

        SELECT
            fide_total_factura
        INTO v_total
        FROM
            fide_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        v_nuevo_total := v_total - ( v_total * v_porcentaje / 100 );
        UPDATE fide_facturas_tb
        SET
            fide_total_factura = v_nuevo_total,
            fide_descuento_id = v_descuento_id,
            fide_porcentaje_aplicado = v_porcentaje
        WHERE
            fide_factura_id = p_factura_id;

        dbms_output.put_line('Descuento aplicado ('
                             || v_porcentaje
                             || '%). Total actualizado: '
                             || v_nuevo_total);
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Descuento no válido o expirado.');
    END;

END fide_facturacion_pkg;
/

---15. Paquete de Medicamentos Reservados

--Actualización de tabla Fide_Medicamentos_Reservados_TB para evitar facturas duplicadas

ALTER TABLE fide_medicamentos_reservados_tb ADD fide_estado_reserva VARCHAR2(20) DEFAULT 'ACTIVA';

ALTER TABLE fide_medicamentos_reservados_tb
    ADD CONSTRAINT chk_estado_reserva
        CHECK ( fide_estado_reserva IN ( 'ACTIVA', 'COMPLETADA', 'CANCELADA' ) );

CREATE OR REPLACE PACKAGE fide_medicamentos_reservados_pkg AS
    PROCEDURE fide_reservar_medicamento_proc (
        p_paciente_cedula      IN VARCHAR2,
        p_medicamento_id       IN NUMBER,
        p_cantidad_medicamento IN NUMBER
    );

    PROCEDURE fide_actualizar_reserva_proc (
        p_paciente_cedula IN VARCHAR2,
        p_medicamento_id  IN NUMBER,
        p_nueva_cantidad  IN NUMBER
    );

    PROCEDURE fide_eliminar_reserva_proc (
        p_paciente_cedula IN VARCHAR2,
        p_medicamento_id  IN NUMBER
    );

END fide_medicamentos_reservados_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_medicamentos_reservados_pkg AS

    PROCEDURE fide_reservar_medicamento_proc (
        p_paciente_cedula      IN VARCHAR2,
        p_medicamento_id       IN NUMBER,
        p_cantidad_medicamento IN NUMBER
    ) IS
        v_existente        NUMBER;
        v_stock_disponible NUMBER;
    BEGIN
        SELECT
            fide_cantidad_medicamento
        INTO v_stock_disponible
        FROM
            fide_medicamentos_tb
        WHERE
            fide_medicamento_id = p_medicamento_id;

        IF p_cantidad_medicamento > v_stock_disponible THEN
            dbms_output.put_line('Error: No hay suficiente stock disponible. Stock actual: ' || v_stock_disponible);
            RETURN;
        END IF;

        SELECT
            COUNT(*)
        INTO v_existente
        FROM
            fide_medicamentos_reservados_tb
        WHERE
                fide_paciente_cedula = p_paciente_cedula
            AND fide_medicamento_id = p_medicamento_id
            AND fide_estado_reserva = 'ACTIVA';

        IF v_existente = 0 THEN
            INSERT INTO fide_medicamentos_reservados_tb (
                fide_paciente_cedula,
                fide_medicamento_id,
                fide_cantidad_medicamento,
                fide_estado_reserva
            ) VALUES ( p_paciente_cedula,
                       p_medicamento_id,
                       p_cantidad_medicamento,
                       'ACTIVA' );

            dbms_output.put_line('Medicamento reservado exitosamente.');
        ELSE
            dbms_output.put_line('Error: Ya existe una reserva activa para este medicamento y paciente.');
        END IF;

    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Error: El medicamento con ID '
                                 || p_medicamento_id
                                 || ' no existe.');
    END;

    PROCEDURE fide_actualizar_reserva_proc (
        p_paciente_cedula IN VARCHAR2,
        p_medicamento_id  IN NUMBER,
        p_nueva_cantidad  IN NUMBER
    ) IS
    BEGIN
        UPDATE fide_medicamentos_reservados_tb
        SET
            fide_cantidad_medicamento = p_nueva_cantidad
        WHERE
                fide_paciente_cedula = p_paciente_cedula
            AND fide_medicamento_id = p_medicamento_id
            AND fide_estado_reserva = 'ACTIVA';

        dbms_output.put_line('Reserva actualizada correctamente.');
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Error: No existe una reserva activa para actualizar.');
    END;

    PROCEDURE fide_eliminar_reserva_proc (
        p_paciente_cedula IN VARCHAR2,
        p_medicamento_id  IN NUMBER
    ) IS
    BEGIN
        UPDATE fide_medicamentos_reservados_tb
        SET
            fide_estado_reserva = 'CANCELADA'
        WHERE
                fide_paciente_cedula = p_paciente_cedula
            AND fide_medicamento_id = p_medicamento_id
            AND fide_estado_reserva = 'ACTIVA';

        dbms_output.put_line('Reserva cancelada correctamente.');
    END;

END fide_medicamentos_reservados_pkg;
/

--16. Paquete de Reportes

CREATE OR REPLACE PACKAGE fide_reportes_pkg AS
    PROCEDURE fide_generar_reporte_pacientes_proc;

    PROCEDURE fide_generar_reporte_empleados_proc;

    PROCEDURE fide_generar_reporte_citas_proc;

    PROCEDURE fide_generar_reporte_facturacion_proc;

    PROCEDURE fide_generar_reporte_medicamentos_proc;

END fide_reportes_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_reportes_pkg AS

    PROCEDURE fide_generar_reporte_pacientes_proc IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_pacientes_tb
        ) LOOP
            dbms_output.put_line('Paciente: ' || r.fide_paciente_cedula);
        END LOOP;
    END;

    PROCEDURE fide_generar_reporte_empleados_proc IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_empleados_tb
        ) LOOP
            dbms_output.put_line('Empleado: '
                                 || r.fide_empleado_cedula
                                 || ' - '
                                 || r.fide_nombre_empleado
                                 || ' '
                                 || r.fide_apellidos_empleado);
        END LOOP;
    END;

    PROCEDURE fide_generar_reporte_citas_proc IS
    BEGIN
        FOR r IN (
            SELECT
                c.fide_cita_id,
                c.fide_paciente_cedula,
                c.fide_fecha_cita,
                c.fide_estado_cita
            FROM
                fide_citas_tb c
        ) LOOP
            dbms_output.put_line('Cita ID: '
                                 || r.fide_cita_id
                                 || ' - Paciente: '
                                 || r.fide_paciente_cedula
                                 || ' - Fecha: '
                                 || r.fide_fecha_cita
                                 || ' - Estado: '
                                 || r.fide_estado_cita);
        END LOOP;
    END;

    PROCEDURE fide_generar_reporte_facturacion_proc IS
    BEGIN
        FOR r IN (
            SELECT
                f.fide_factura_id,
                f.fide_paciente_cedula,
                f.fide_total_factura,
                f.fide_estado_factura
            FROM
                fide_facturas_tb f
        ) LOOP
            dbms_output.put_line('Factura ID: '
                                 || r.fide_factura_id
                                 || ' - Paciente: '
                                 || r.fide_paciente_cedula
                                 || ' - Total: '
                                 || r.fide_total_factura
                                 || ' - Estado: '
                                 || r.fide_estado_factura);
        END LOOP;
    END;

    PROCEDURE fide_generar_reporte_medicamentos_proc IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_medicamentos_tb
        ) LOOP
            dbms_output.put_line('Medicamento: '
                                 || r.fide_nombre_medicamento
                                 || ' - Cantidad: '
                                 || r.fide_cantidad_medicamento
                                 || ' - Precio: '
                                 || r.fide_precio_medicamento);
        END LOOP;
    END;

END fide_reportes_pkg;
/

---17. Paquete de Dashboard

CREATE OR REPLACE PACKAGE fide_dashboard_pkg AS
    PROCEDURE fide_obtener_estadisticas_generales_proc;

    PROCEDURE fide_obtener_resumen_citas_proc;

    PROCEDURE fide_obtener_resumen_facturacion_proc;

    PROCEDURE fide_obtener_resumen_medicamentos_proc;

END fide_dashboard_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_dashboard_pkg AS

    PROCEDURE fide_obtener_estadisticas_generales_proc IS
        v_total_pacientes    NUMBER;
        v_total_empleados    NUMBER;
        v_total_facturas     NUMBER;
        v_total_medicamentos NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_total_pacientes
        FROM
            fide_pacientes_tb;

        SELECT
            COUNT(*)
        INTO v_total_empleados
        FROM
            fide_empleados_tb;

        SELECT
            COUNT(*)
        INTO v_total_facturas
        FROM
            fide_facturas_tb;

        SELECT
            COUNT(*)
        INTO v_total_medicamentos
        FROM
            fide_medicamentos_tb;

        dbms_output.put_line('Total Pacientes: ' || v_total_pacientes);
        dbms_output.put_line('Total Empleados: ' || v_total_empleados);
        dbms_output.put_line('Total Facturas: ' || v_total_facturas);
        dbms_output.put_line('Total Medicamentos: ' || v_total_medicamentos);
    END;

    PROCEDURE fide_obtener_resumen_citas_proc IS
        v_activas    NUMBER;
        v_completas  NUMBER;
        v_canceladas NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_activas
        FROM
            fide_citas_tb
        WHERE
            fide_estado_cita = 'ACTIVA';

        SELECT
            COUNT(*)
        INTO v_completas
        FROM
            fide_citas_tb
        WHERE
            fide_estado_cita = 'COMPLETADA';

        SELECT
            COUNT(*)
        INTO v_canceladas
        FROM
            fide_citas_tb
        WHERE
            fide_estado_cita = 'CANCELADA';

        dbms_output.put_line('Citas Activas: ' || v_activas);
        dbms_output.put_line('Citas Completadas: ' || v_completas);
        dbms_output.put_line('Citas Canceladas: ' || v_canceladas);
    END;

    PROCEDURE fide_obtener_resumen_facturacion_proc IS

        v_total_monto        NUMBER;
        v_facturas_pag       NUMBER;
        v_facturas_pen       NUMBER;
        v_facturas_anul      NUMBER;
        v_total_anulado      NUMBER;
        v_total_facturas     NUMBER;
        v_porcentaje_anulado NUMBER;
    BEGIN
        SELECT
            nvl(
                sum(fide_total_factura),
                0
            )
        INTO v_total_monto
        FROM
            fide_facturas_tb;

        SELECT
            COUNT(*)
        INTO v_facturas_pag
        FROM
            fide_facturas_tb
        WHERE
            fide_estado_factura = 'COBRADO';

        SELECT
            COUNT(*)
        INTO v_facturas_pen
        FROM
            fide_facturas_tb
        WHERE
            fide_estado_factura = 'PENDIENTE';

        SELECT
            COUNT(*)
        INTO v_facturas_anul
        FROM
            fide_facturas_tb
        WHERE
            fide_estado_factura = 'ANULADA';

        SELECT
            nvl(
                sum(fide_total_factura),
                0
            )
        INTO v_total_anulado
        FROM
            fide_facturas_tb
        WHERE
            fide_estado_factura = 'ANULADA';

        SELECT
            COUNT(*)
        INTO v_total_facturas
        FROM
            fide_facturas_tb;

        IF v_total_facturas > 0 THEN
            v_porcentaje_anulado := round((v_facturas_anul * 100) / v_total_facturas, 2);
        ELSE
            v_porcentaje_anulado := 0;
        END IF;

        dbms_output.put_line('Monto Total Facturado: ' || v_total_monto);
        dbms_output.put_line('Facturas Pagadas: ' || v_facturas_pag);
        dbms_output.put_line('Facturas Pendientes: ' || v_facturas_pen);
        dbms_output.put_line('Facturas Anuladas: ' || v_facturas_anul);
        dbms_output.put_line('Monto Total Anulado: ' || v_total_anulado);
        dbms_output.put_line('Porcentaje de Facturas Anuladas: '
                             || v_porcentaje_anulado
                             || '%');
    END;

    PROCEDURE fide_obtener_resumen_medicamentos_proc IS
    BEGIN
        FOR r IN (
            SELECT
                fide_nombre_medicamento,
                fide_cantidad_medicamento
            FROM
                fide_medicamentos_tb
            ORDER BY
                fide_cantidad_medicamento ASC
        ) LOOP
            dbms_output.put_line('Medicamento: '
                                 || r.fide_nombre_medicamento
                                 || ' - Stock: '
                                 || r.fide_cantidad_medicamento);
        END LOOP;
    END;

END fide_dashboard_pkg;
/

---18. Admin de facturas

CREATE OR REPLACE PACKAGE fide_admin_facturas_pkg AS
    PROCEDURE fide_leer_facturas_proc;

    PROCEDURE fide_actualizar_factura_proc (
        p_factura_id     IN NUMBER,
        p_nuevo_total    IN NUMBER,
        p_estado_factura IN VARCHAR2
    );

    PROCEDURE fide_eliminar_factura_proc (
        p_factura_id IN NUMBER
    );

    PROCEDURE fide_leer_detalles_proc (
        p_factura_id IN NUMBER
    );

    PROCEDURE fide_eliminar_detalles_proc (
        p_factura_id IN NUMBER
    );

END fide_admin_facturas_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_admin_facturas_pkg AS

    PROCEDURE fide_leer_facturas_proc IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_facturas_tb
        ) LOOP
            dbms_output.put_line('Factura ID: '
                                 || r.fide_factura_id
                                 || ' | Paciente: '
                                 || r.fide_paciente_cedula
                                 || ' | Total: '
                                 || r.fide_total_factura
                                 || ' | Estado: '
                                 || r.fide_estado_factura);
        END LOOP;
    END;

    PROCEDURE fide_actualizar_factura_proc (
        p_factura_id     IN NUMBER,
        p_nuevo_total    IN NUMBER,
        p_estado_factura IN VARCHAR2
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        IF v_count = 0 THEN
            dbms_output.put_line('Error: La factura con ID '
                                 || p_factura_id
                                 || ' no existe.');
            RETURN;
        END IF;

        UPDATE fide_facturas_tb
        SET
            fide_total_factura = p_nuevo_total,
            fide_estado_factura = p_estado_factura
        WHERE
            fide_factura_id = p_factura_id;

        dbms_output.put_line('Factura actualizada exitosamente.');
    END;

    PROCEDURE fide_eliminar_factura_proc (
        p_factura_id IN NUMBER
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        IF v_count = 0 THEN
            dbms_output.put_line('Error: La factura con ID '
                                 || p_factura_id
                                 || ' no existe.');
            RETURN;
        END IF;

        DELETE FROM fide_recibos_tb
        WHERE
            fide_factura_id = p_factura_id;

        DELETE FROM fide_detalles_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        DELETE FROM fide_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        dbms_output.put_line('Factura eliminada correctamente.');
    END;

    PROCEDURE fide_leer_detalles_proc (
        p_factura_id IN NUMBER
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_detalles_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        IF v_count = 0 THEN
            dbms_output.put_line('No se encontraron detalles para la factura ID: ' || p_factura_id);
            RETURN;
        END IF;

        FOR r IN (
            SELECT
                *
            FROM
                fide_detalles_facturas_tb
            WHERE
                fide_factura_id = p_factura_id
        ) LOOP
            dbms_output.put_line('Detalle ID: '
                                 || r.fide_detalle_factura_id
                                 || ' | Descripción: '
                                 || r.fide_descripcion_factura
                                 || ' | Monto: '
                                 || r.fide_monto_factura);
        END LOOP;

    END;

    PROCEDURE fide_eliminar_detalles_proc (
        p_factura_id IN NUMBER
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_detalles_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        IF v_count = 0 THEN
            dbms_output.put_line('No hay detalles que eliminar para la factura ID: ' || p_factura_id);
            RETURN;
        END IF;

        DELETE FROM fide_detalles_facturas_tb
        WHERE
            fide_factura_id = p_factura_id;

        dbms_output.put_line('Detalles de la factura eliminados correctamente.');
    END;

END fide_admin_facturas_pkg;
/

---19. CRUD para tablas clínicas como historial médico, hospitalizaciones, estados de pacientes y recibos

CREATE OR REPLACE PACKAGE fide_admin_clinico_pkg AS
    PROCEDURE leer_pacientes;

    PROCEDURE crear_paciente (
        p_cedula    IN VARCHAR2,
        p_nombre    IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_telefono  IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_correo    IN VARCHAR2,
        p_estado_id IN NUMBER,
        p_deuda     IN NUMBER
    );

    PROCEDURE actualizar_paciente (
        p_cedula    IN VARCHAR2,
        p_nombre    IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_telefono  IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_correo    IN VARCHAR2,
        p_estado_id IN NUMBER,
        p_deuda     IN NUMBER
    );

    PROCEDURE eliminar_paciente (
        p_cedula IN VARCHAR2
    );

    PROCEDURE leer_historial_medico;

    PROCEDURE crear_historial (
        p_paciente_cedula IN VARCHAR2,
        p_observacion     IN VARCHAR2
    );

    PROCEDURE actualizar_historial (
        p_historial_id IN NUMBER,
        p_observacion  IN VARCHAR2
    );

    PROCEDURE eliminar_historial (
        p_historial_id IN NUMBER
    );

    PROCEDURE leer_estados_pacientes;

    PROCEDURE leer_hospitalizaciones;

    PROCEDURE crear_hospitalizacion (
        p_paciente_cedula IN VARCHAR2,
        p_fecha_inicio    IN DATE
    );

    PROCEDURE eliminar_hospitalizacion (
        p_hosp_id IN NUMBER
    );

    PROCEDURE leer_recibos;

    PROCEDURE crear_recibo (
        p_factura_id IN NUMBER,
        p_monto      IN NUMBER,
        p_metodo     IN VARCHAR2
    );

    PROCEDURE eliminar_recibo (
        p_recibo_id IN NUMBER
    );

END fide_admin_clinico_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_admin_clinico_pkg AS

    PROCEDURE leer_historial_medico IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_historial_medico_tb
        ) LOOP
            dbms_output.put_line('Historial ID: '
                                 || r.fide_historial_id
                                 || ' | Paciente: '
                                 || r.fide_paciente_cedula
                                 || ' | Observaciones: '
                                 || r.fide_observaciones);
        END LOOP;
    END;

    PROCEDURE crear_historial (
        p_paciente_cedula IN VARCHAR2,
        p_observacion     IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_historial_medico_tb (
            fide_paciente_cedula,
            fide_observaciones
        ) VALUES ( p_paciente_cedula,
                   p_observacion );

        dbms_output.put_line('Historial creado.');
    END;

    PROCEDURE actualizar_historial (
        p_historial_id IN NUMBER,
        p_observacion  IN VARCHAR2
    ) IS
    BEGIN
        UPDATE fide_historial_medico_tb
        SET
            fide_observaciones = p_observacion
        WHERE
            fide_historial_id = p_historial_id;

        dbms_output.put_line('Historial actualizado.');
    END;

    PROCEDURE eliminar_historial (
        p_historial_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_historial_medico_tb
        WHERE
            fide_historial_id = p_historial_id;

        dbms_output.put_line('Historial eliminado.');
    END;

    PROCEDURE leer_estados_pacientes IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_estados_pacientes_tb
        ) LOOP
            dbms_output.put_line('Estado paciente ID: ' || r.fide_estado_paciente_id);
        END LOOP;
    END;

    PROCEDURE leer_hospitalizaciones IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_hospitalizaciones_tb
        ) LOOP
            dbms_output.put_line('Hospitalización ID: ' || r.fide_hospitalizacion_id);
        END LOOP;
    END;

    PROCEDURE crear_hospitalizacion (
        p_paciente_cedula IN VARCHAR2,
        p_fecha_inicio    IN DATE
    ) IS
    BEGIN
        INSERT INTO fide_hospitalizaciones_tb (
            fide_paciente_cedula,
            fide_fecha_ingreso
        ) VALUES ( p_paciente_cedula,
                   p_fecha_inicio );

        dbms_output.put_line('Hospitalización registrada.');
    END;

    PROCEDURE eliminar_hospitalizacion (
        p_hosp_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_hospitalizaciones_tb
        WHERE
            fide_hospitalizacion_id = p_hosp_id;

        dbms_output.put_line('Hospitalización eliminada.');
    END;

    PROCEDURE leer_recibos IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_recibos_tb
        ) LOOP
            dbms_output.put_line('Recibo ID: '
                                 || r.fide_recibo_id
                                 || ' | Factura: '
                                 || r.fide_factura_id
                                 || ' | Monto: '
                                 || r.fide_monto_pagado);
        END LOOP;
    END;

    PROCEDURE crear_recibo (
        p_factura_id IN NUMBER,
        p_monto      IN NUMBER,
        p_metodo     IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_recibos_tb (
            fide_factura_id,
            fide_monto_pagado,
            fide_metodo_pago
        ) VALUES ( p_factura_id,
                   p_monto,
                   p_metodo );

        dbms_output.put_line('Recibo registrado.');
    END;

    PROCEDURE eliminar_recibo (
        p_recibo_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_recibos_tb
        WHERE
            fide_recibo_id = p_recibo_id;

        dbms_output.put_line('Recibo eliminado.');
    END;

    PROCEDURE leer_pacientes IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_pacientes_tb
        ) LOOP
            dbms_output.put_line('Paciente: '
                                 || r.fide_paciente_cedula
                                 || ' | Nombre: '
                                 || r.fide_nombre_paciente);
        END LOOP;
    END;

    PROCEDURE crear_paciente (
        p_cedula    IN VARCHAR2,
        p_nombre    IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_telefono  IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_correo    IN VARCHAR2,
        p_estado_id IN NUMBER,
        p_deuda     IN NUMBER
    ) IS
    BEGIN
        INSERT INTO fide_pacientes_tb (
            fide_paciente_cedula,
            fide_nombre_paciente,
            fide_apellidos_paciente,
            fide_telefono_paciente,
            fide_direccion_paciente,
            fide_correo_paciente,
            fide_estado_paciente_id,
            fide_deuda_paciente
        ) VALUES ( p_cedula,
                   p_nombre,
                   p_apellidos,
                   p_telefono,
                   p_direccion,
                   p_correo,
                   p_estado_id,
                   p_deuda );

        dbms_output.put_line('Paciente creado.');
    END;

    PROCEDURE actualizar_paciente (
        p_cedula    IN VARCHAR2,
        p_nombre    IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_telefono  IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_correo    IN VARCHAR2,
        p_estado_id IN NUMBER,
        p_deuda     IN NUMBER
    ) IS
    BEGIN
        UPDATE fide_pacientes_tb
        SET
            fide_nombre_paciente = p_nombre,
            fide_apellidos_paciente = p_apellidos,
            fide_telefono_paciente = p_telefono,
            fide_direccion_paciente = p_direccion,
            fide_correo_paciente = p_correo,
            fide_estado_paciente_id = p_estado_id,
            fide_deuda_paciente = p_deuda
        WHERE
            fide_paciente_cedula = p_cedula;

        dbms_output.put_line('Paciente actualizado.');
    END;

    PROCEDURE eliminar_paciente (
        p_cedula IN VARCHAR2
    ) IS
    BEGIN
        DELETE FROM fide_pacientes_tb
        WHERE
            fide_paciente_cedula = p_cedula;

        dbms_output.put_line('Paciente eliminado.');
    END;

END fide_admin_clinico_pkg;
/

---20. CRUD para empleados, roles, tipos, y permisos

CREATE OR REPLACE PACKAGE fide_admin_personal_pkg AS
    PROCEDURE leer_empleados;

    PROCEDURE crear_empleado (
        p_cedula IN VARCHAR2,
        p_nombre IN VARCHAR2
    );

    PROCEDURE actualizar_empleado (
        p_cedula IN VARCHAR2,
        p_nombre IN VARCHAR2
    );

    PROCEDURE eliminar_empleado (
        p_cedula IN VARCHAR2
    );

    PROCEDURE leer_tipos_empleados;

    PROCEDURE crear_tipo_empleado (
        p_descripcion IN VARCHAR2
    );

    PROCEDURE actualizar_tipo_empleado (
        p_tipo_id     IN NUMBER,
        p_descripcion IN VARCHAR2
    );

    PROCEDURE eliminar_tipo_empleado (
        p_tipo_id IN NUMBER
    );

    PROCEDURE leer_roles;

    PROCEDURE crear_rol (
        p_nombre IN VARCHAR2
    );

    PROCEDURE actualizar_rol (
        p_rol_id IN NUMBER,
        p_nombre IN VARCHAR2
    );

    PROCEDURE eliminar_rol (
        p_rol_id IN NUMBER
    );

    PROCEDURE leer_permisos;

    PROCEDURE crear_permiso (
        p_descripcion IN VARCHAR2
    );

    PROCEDURE actualizar_permiso (
        p_permiso_id  IN NUMBER,
        p_descripcion IN VARCHAR2
    );

    PROCEDURE eliminar_permiso (
        p_permiso_id IN NUMBER
    );

    PROCEDURE leer_roles_permisos;

    PROCEDURE crear_rol_permiso (
        p_rol_id     IN NUMBER,
        p_permiso_id IN NUMBER
    );

    PROCEDURE eliminar_rol_permiso (
        p_rol_id     IN NUMBER,
        p_permiso_id IN NUMBER
    );

END fide_admin_personal_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_admin_personal_pkg AS

    PROCEDURE leer_empleados IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_empleados_tb
        ) LOOP
            dbms_output.put_line('Empleado: '
                                 || r.fide_empleado_cedula
                                 || ' | Nombre: '
                                 || r.fide_nombre_empleado);
        END LOOP;
    END;

    PROCEDURE crear_empleado (
        p_cedula IN VARCHAR2,
        p_nombre IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_empleados_tb (
            fide_empleado_cedula,
            fide_nombre_empleado
        ) VALUES ( p_cedula,
                   p_nombre );

        dbms_output.put_line('Empleado creado.');
    END;

    PROCEDURE actualizar_empleado (
        p_cedula IN VARCHAR2,
        p_nombre IN VARCHAR2
    ) IS
    BEGIN
        UPDATE fide_empleados_tb
        SET
            fide_nombre_empleado = p_nombre
        WHERE
            fide_empleado_cedula = p_cedula;

        dbms_output.put_line('Empleado actualizado.');
    END;

    PROCEDURE eliminar_empleado (
        p_cedula IN VARCHAR2
    ) IS
    BEGIN
        DELETE FROM fide_empleados_tb
        WHERE
            fide_empleado_cedula = p_cedula;

        dbms_output.put_line('Empleado eliminado.');
    END;

    PROCEDURE leer_tipos_empleados IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_tipos_empleados_tb
        ) LOOP
            dbms_output.put_line('Tipo ID: '
                                 || r.fide_tipo_empleado_id
                                 || ' | Descripción: '
                                 || r.fide_descripcion_tipo_empleado);
        END LOOP;
    END;

    PROCEDURE crear_tipo_empleado (
        p_descripcion IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_tipos_empleados_tb ( fide_descripcion_tipo_empleado ) VALUES ( p_descripcion );

        dbms_output.put_line('Tipo de empleado creado.');
    END;

    PROCEDURE actualizar_tipo_empleado (
        p_tipo_id     IN NUMBER,
        p_descripcion IN VARCHAR2
    ) IS
    BEGIN
        UPDATE fide_tipos_empleados_tb
        SET
            fide_descripcion_tipo_empleado = p_descripcion
        WHERE
            fide_tipo_empleado_id = p_tipo_id;

        dbms_output.put_line('Tipo de empleado actualizado.');
    END;

    PROCEDURE eliminar_tipo_empleado (
        p_tipo_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_tipos_empleados_tb
        WHERE
            fide_tipo_empleado_id = p_tipo_id;

        dbms_output.put_line('Tipo de empleado eliminado.');
    END;

    PROCEDURE leer_roles IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_roles_tb
        ) LOOP
            dbms_output.put_line('Rol ID: '
                                 || r.fide_rol_id
                                 || ' | Nombre: '
                                 || r.fide_nombre_rol);
        END LOOP;
    END;

    PROCEDURE crear_rol (
        p_nombre IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_roles_tb ( fide_nombre_rol ) VALUES ( p_nombre );

        dbms_output.put_line('Rol creado.');
    END;

    PROCEDURE actualizar_rol (
        p_rol_id IN NUMBER,
        p_nombre IN VARCHAR2
    ) IS
    BEGIN
        UPDATE fide_roles_tb
        SET
            fide_nombre_rol = p_nombre
        WHERE
            fide_rol_id = p_rol_id;

        dbms_output.put_line('Rol actualizado.');
    END;

    PROCEDURE eliminar_rol (
        p_rol_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_roles_tb
        WHERE
            fide_rol_id = p_rol_id;

        dbms_output.put_line('Rol eliminado.');
    END;

    PROCEDURE leer_permisos IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_permisos_tb
        ) LOOP
            dbms_output.put_line('Permiso ID: '
                                 || r.fide_permiso_id
                                 || ' | Descripción: '
                                 || r.fide_descripcion_permiso);
        END LOOP;
    END;

    PROCEDURE crear_permiso (
        p_descripcion IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_permisos_tb ( fide_descripcion_permiso ) VALUES ( p_descripcion );

        dbms_output.put_line('Permiso creado.');
    END;

    PROCEDURE actualizar_permiso (
        p_permiso_id  IN NUMBER,
        p_descripcion IN VARCHAR2
    ) IS
    BEGIN
        UPDATE fide_permisos_tb
        SET
            fide_descripcion_permiso = p_descripcion
        WHERE
            fide_permiso_id = p_permiso_id;

        dbms_output.put_line('Permiso actualizado.');
    END;

    PROCEDURE eliminar_permiso (
        p_permiso_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_permisos_tb
        WHERE
            fide_permiso_id = p_permiso_id;

        dbms_output.put_line('Permiso eliminado.');
    END;

    PROCEDURE leer_roles_permisos IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_roles_permisos_tb
        ) LOOP
            dbms_output.put_line('Rol: '
                                 || r.fide_rol_id
                                 || ' | Permiso: '
                                 || r.fide_permiso_id);
        END LOOP;
    END;

    PROCEDURE crear_rol_permiso (
        p_rol_id     IN NUMBER,
        p_permiso_id IN NUMBER
    ) IS
    BEGIN
        INSERT INTO fide_roles_permisos_tb (
            fide_rol_id,
            fide_permiso_id
        ) VALUES ( p_rol_id,
                   p_permiso_id );

        dbms_output.put_line('Relación rol-permiso creada.');
    END;

    PROCEDURE eliminar_rol_permiso (
        p_rol_id     IN NUMBER,
        p_permiso_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_roles_permisos_tb
        WHERE
                fide_rol_id = p_rol_id
            AND fide_permiso_id = p_permiso_id;

        dbms_output.put_line('Relación rol-permiso eliminada.');
    END;

END fide_admin_personal_pkg;
/


--21. CRUD para tablas del sistema: usuarios, tokens, logs, notificaciones

CREATE OR REPLACE PACKAGE fide_admin_sistema_pkg AS
    PROCEDURE leer_usuarios;

    PROCEDURE crear_usuario (
        p_nombre IN VARCHAR2
    );

    PROCEDURE actualizar_usuario (
        p_usuario_id IN NUMBER,
        p_nombre     IN VARCHAR2
    );

    PROCEDURE eliminar_usuario (
        p_usuario_id IN NUMBER
    );

    PROCEDURE leer_tokens_seguridad;

    PROCEDURE crear_token (
        p_usuario_id IN NUMBER
    );

    PROCEDURE eliminar_token (
        p_token_id IN NUMBER
    );

    PROCEDURE leer_logs_acceso;

    PROCEDURE leer_notificaciones;

    PROCEDURE crear_notificacion (
        p_asunto IN VARCHAR2,
        p_cuerpo IN VARCHAR2
    );

    PROCEDURE eliminar_notificacion (
        p_notificacion_id IN NUMBER
    );

END fide_admin_sistema_pkg;
/

CREATE OR REPLACE PACKAGE BODY fide_admin_sistema_pkg AS

    PROCEDURE leer_usuarios IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_usuarios_tb
        ) LOOP
            dbms_output.put_line('Usuario ID: '
                                 || r.fide_usuario_id
                                 || ' | Nombre: '
                                 || r.fide_nombre_usuario);
        END LOOP;
    END;

    PROCEDURE crear_usuario (
        p_nombre IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_usuarios_tb ( fide_nombre_usuario ) VALUES ( p_nombre );

        dbms_output.put_line('Usuario creado.');
    END;

    PROCEDURE actualizar_usuario (
        p_usuario_id IN NUMBER,
        p_nombre     IN VARCHAR2
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            fide_usuarios_tb
        WHERE
            fide_usuario_id = p_usuario_id;

        IF v_count = 0 THEN
            dbms_output.put_line('No se encontró el usuario ID: ' || p_usuario_id);
            RETURN;
        END IF;

        UPDATE fide_usuarios_tb
        SET
            fide_nombre_usuario = p_nombre
        WHERE
            fide_usuario_id = p_usuario_id;

        dbms_output.put_line('Usuario actualizado.');
    END;

    PROCEDURE eliminar_usuario (
        p_usuario_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_usuarios_tb
        WHERE
            fide_usuario_id = p_usuario_id;

        dbms_output.put_line('Usuario eliminado.');
    END;

    PROCEDURE leer_tokens_seguridad IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_tokens_seguridad_tb
        ) LOOP
            dbms_output.put_line('Token ID: '
                                 || r.fide_token_id
                                 || ' | Usuario: '
                                 || r.fide_usuario_id);
        END LOOP;
    END;

    PROCEDURE crear_token (
        p_usuario_id IN NUMBER
    ) IS
    BEGIN
        INSERT INTO fide_tokens_seguridad_tb ( fide_usuario_id ) VALUES ( p_usuario_id );

        dbms_output.put_line('Token creado para usuario ID: ' || p_usuario_id);
    END;

    PROCEDURE eliminar_token (
        p_token_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_tokens_seguridad_tb
        WHERE
            fide_token_id = p_token_id;

        dbms_output.put_line('Token eliminado.');
    END;

    PROCEDURE leer_logs_acceso IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_logs_acceso_tb
        ) LOOP
            dbms_output.put_line('Log ID: '
                                 || r.fide_log_id
                                 || ' | Usuario: '
                                 || r.fide_usuario_id
                                 || ' | Fecha: '
                                 || to_char(r.fide_fecha_acceso, 'YYYY-MM-DD HH24:MI'));
        END LOOP;
    END;

    PROCEDURE leer_notificaciones IS
    BEGIN
        FOR r IN (
            SELECT
                *
            FROM
                fide_notificaciones_tb
        ) LOOP
            dbms_output.put_line('Notificación ID: '
                                 || r.fide_notificacion_id
                                 || ' | Asunto: '
                                 || r.fide_asunto);
        END LOOP;
    END;

    PROCEDURE crear_notificacion (
        p_asunto IN VARCHAR2,
        p_cuerpo IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO fide_notificaciones_tb (
            fide_asunto,
            fide_cuerpo
        ) VALUES ( p_asunto,
                   p_cuerpo );

        dbms_output.put_line('Notificación creada.');
    END;

    PROCEDURE eliminar_notificacion (
        p_notificacion_id IN NUMBER
    ) IS
    BEGIN
        DELETE FROM fide_notificaciones_tb
        WHERE
            fide_notificacion_id = p_notificacion_id;

        dbms_output.put_line('Notificación eliminada.');
    END;

END fide_admin_sistema_pkg;
/






