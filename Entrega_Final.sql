--===============================================================================
-- Renombrar tablas y atributos en la base de datos con el 
-- prefijo FIDE_ y sufijo _TB para estandarización y mejora de la nomenclatura
--===============================================================================


-- Tabla de Roles
ALTER TABLE roles RENAME TO FIDE_ROLES_TB;
ALTER TABLE FIDE_ROLES_TB RENAME COLUMN id TO FIDE_ROL_ID;
ALTER TABLE FIDE_ROLES_TB RENAME COLUMN nombre TO FIDE_NOMBRE_ROL;
-- Tabla de Usuarios
ALTER TABLE usuarios RENAME TO FIDE_USUARIOS_TB;
ALTER TABLE FIDE_USUARIOS_TB RENAME COLUMN id TO FIDE_USUARIO_ID;
ALTER TABLE FIDE_USUARIOS_TB RENAME COLUMN nombre_usuario TO FIDE_NOMBRE_USUARIO;
ALTER TABLE FIDE_USUARIOS_TB RENAME COLUMN contrasena TO FIDE_CONTRASENA;
ALTER TABLE FIDE_USUARIOS_TB RENAME COLUMN rol_id TO FIDE_ROL_ID;
-- Tabla de Tipos de Empleados
ALTER TABLE tipos_empleados RENAME TO FIDE_TIPOS_EMPLEADOS_TB;
ALTER TABLE FIDE_TIPOS_EMPLEADOS_TB RENAME COLUMN id TO FIDE_TIPO_EMPLEADO_ID;
ALTER TABLE FIDE_TIPOS_EMPLEADOS_TB RENAME COLUMN tipo TO
FIDE_DESCRIPCION_TIPO_EMPLEADO;
-- Tabla de Empleados
ALTER TABLE empleados RENAME TO FIDE_EMPLEADOS_TB;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN cedula TO FIDE_EMPLEADO_CEDULA;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN nombre TO FIDE_NOMBRE_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN apellidos TO FIDE_APELLIDOS_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN telefono TO FIDE_TELEFONO_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN direccion TO FIDE_DIRECCION_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN correo TO FIDE_CORREO_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN tipo_empleado_id TO FIDE_TIPO_EMPLEADO_ID;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN estado TO FIDE_ESTADO_EMPLEADO;
ALTER TABLE FIDE_EMPLEADOS_TB RENAME COLUMN salario_por_hora TO FIDE_SALARIO_HORA;
-- Tabla de Estados de Pacientes
ALTER TABLE estados_pacientes RENAME TO FIDE_ESTADOS_PACIENTES_TB;
ALTER TABLE FIDE_ESTADOS_PACIENTES_TB RENAME COLUMN id TO FIDE_ESTADO_PACIENTE_ID;
ALTER TABLE FIDE_ESTADOS_PACIENTES_TB RENAME COLUMN estado TO
FIDE_DESCRIPCION_ESTADO_PACIENTE;
-- Tabla de Pacientes
ALTER TABLE pacientes RENAME TO FIDE_PACIENTES_TB;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN cedula TO FIDE_PACIENTE_CEDULA;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN nombre TO FIDE_NOMBRE_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN apellidos TO FIDE_APELLIDOS_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN telefono TO FIDE_TELEFONO_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN direccion TO FIDE_DIRECCION_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN correo TO FIDE_CORREO_PACIENTE;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN estado_paciente_id TO FIDE_ESTADO_PACIENTE_ID;
ALTER TABLE FIDE_PACIENTES_TB RENAME COLUMN deuda TO FIDE_DEUDA_PACIENTE;
-- Tabla de Citas
ALTER TABLE citas RENAME TO FIDE_CITAS_TB;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN id TO FIDE_CITA_ID;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN cedula_paciente TO FIDE_PACIENTE_CEDULA;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN cedula_empleado TO FIDE_EMPLEADO_CEDULA;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN fecha TO FIDE_FECHA_CITA;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN sala_id TO FIDE_SALA_ID;
ALTER TABLE FIDE_CITAS_TB RENAME COLUMN motivo TO FIDE_MOTIVO_CITA;
-- Tabla de Salas
ALTER TABLE salas RENAME TO FIDE_SALAS_TB;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN id TO FIDE_SALA_ID;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN capacidad TO FIDE_CAPACIDAD_SALA;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN tipo_sala_id TO FIDE_TIPO_SALA_ID;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN estado_sala_id TO FIDE_ESTADO_SALA_ID;
ALTER TABLE FIDE_SALAS_TB RENAME COLUMN precio_por_hora TO FIDE_PRECIO_HORA_SALA;
-- Tabla de Alquileres
ALTER TABLE alquileres RENAME TO FIDE_ALQUILERES_TB;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN id TO FIDE_ALQUILER_ID;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN sala_id TO FIDE_SALA_ID;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN doctor TO FIDE_DOCTOR_ALQUILER;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN fecha_inicio TO FIDE_FECHA_INICIO_ALQUILER;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN fecha_fin TO FIDE_FECHA_FIN_ALQUILER;
ALTER TABLE FIDE_ALQUILERES_TB RENAME COLUMN total TO FIDE_TOTAL_ALQUILER;
-- Tabla de Medicamentos
ALTER TABLE medicamentos RENAME TO FIDE_MEDICAMENTOS_TB;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN id TO FIDE_MEDICAMENTO_ID;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN nombre TO FIDE_NOMBRE_MEDICAMENTO;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN precio TO FIDE_PRECIO_MEDICAMENTO;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN cantidad TO FIDE_CANTIDAD_MEDICAMENTO;
ALTER TABLE FIDE_MEDICAMENTOS_TB RENAME COLUMN informacion TO
FIDE_INFORMACION_MEDICAMENTO;
-- Tabla de Medicamentos Reservados
ALTER TABLE medicamentos_reservados RENAME TO FIDE_MEDICAMENTOS_RESERVADOS_TB;
ALTER TABLE FIDE_MEDICAMENTOS_RESERVADOS_TB RENAME COLUMN id TO FIDE_RESERVA_ID;
ALTER TABLE FIDE_MEDICAMENTOS_RESERVADOS_TB RENAME COLUMN cedula_paciente TO
FIDE_PACIENTE_CEDULA;
ALTER TABLE FIDE_MEDICAMENTOS_RESERVADOS_TB RENAME COLUMN medicamento_id TO
FIDE_MEDICAMENTO_ID;
ALTER TABLE FIDE_MEDICAMENTOS_RESERVADOS_TB RENAME COLUMN cantidad TO
FIDE_CANTIDAD_MEDICAMENTO;
-- Tabla de Facturas
ALTER TABLE facturas RENAME TO FIDE_FACTURAS_TB;
ALTER TABLE FIDE_FACTURAS_TB RENAME COLUMN id TO FIDE_FACTURA_ID;
ALTER TABLE FIDE_FACTURAS_TB RENAME COLUMN cedula_paciente TO FIDE_PACIENTE_CEDULA;
ALTER TABLE FIDE_FACTURAS_TB RENAME COLUMN estado TO FIDE_ESTADO_FACTURA;
ALTER TABLE FIDE_FACTURAS_TB RENAME COLUMN total TO FIDE_TOTAL_FACTURA;
-- Tabla de Detalles de Facturas
ALTER TABLE detalles_facturas RENAME TO FIDE_DETALLES_FACTURAS_TB;
ALTER TABLE FIDE_DETALLES_FACTURAS_TB RENAME COLUMN id TO FIDE_DETALLE_FACTURA_ID;
ALTER TABLE FIDE_DETALLES_FACTURAS_TB RENAME COLUMN factura_id TO FIDE_FACTURA_ID;
ALTER TABLE FIDE_DETALLES_FACTURAS_TB RENAME COLUMN descripcion TO FIDE_DESCRIPCION_FACTURA;
ALTER TABLE FIDE_DETALLES_FACTURAS_TB RENAME COLUMN monto TO FIDE_MONTO_FACTURA;

--Aca tambien modificamos el trigger y la Secuencia necesarias para la tabla Citas
-- Eliminar Secuencia Existente
DROP SEQUENCE seq_citas;
-- Eliminar Trigger Existente
DROP TRIGGER trg_citas;

-- Crear Secuencia con el nuevo prefijo y nomenclatura
CREATE SEQUENCE FIDE_SEQ_CITAS START WITH 1 INCREMENT BY 1;

-- Crear Trigger con el nuevo prefijo y nomenclatura
CREATE OR REPLACE TRIGGER FIDE_TRG_CITAS
BEFORE INSERT ON FIDE_CITAS_TB
FOR EACH ROW
BEGIN
    SELECT FIDE_SEQ_CITAS.NEXTVAL INTO :NEW.FIDE_CITA_ID FROM DUAL;
END;
/

-- ==============================================
-- ==============================================
-- ==============================================
-- NUEVAS TABLAS PARA LOS NUEVOS PAQUETES Y PROCEDIMIENTOS
--===============================================
-- ==============================================
-- ==============================================

-- 1. Historial Médico
CREATE TABLE FIDE_HISTORIAL_MEDICO_TB (
    FIDE_HISTORIAL_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_PACIENTE_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_EMPLEADO_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_FECHA_REGISTRO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_DIAGNOSTICO VARCHAR2(1000) NOT NULL,
    FIDE_TRATAMIENTO VARCHAR2(1000),
    FIDE_OBSERVACIONES VARCHAR2(2000),
    CONSTRAINT fk_historial_paciente FOREIGN KEY (FIDE_PACIENTE_CEDULA) REFERENCES FIDE_PACIENTES_TB(FIDE_PACIENTE_CEDULA),
    CONSTRAINT fk_historial_empleado FOREIGN KEY (FIDE_EMPLEADO_CEDULA) REFERENCES FIDE_EMPLEADOS_TB(FIDE_EMPLEADO_CEDULA)
);

-- 2. Hospitalizaciones
CREATE TABLE FIDE_HOSPITALIZACIONES_TB (
    FIDE_HOSPITALIZACION_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_PACIENTE_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_SALA_ID NUMBER NOT NULL,
    FIDE_EMPLEADO_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_FECHA_INGRESO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_FECHA_ALTA TIMESTAMP,
    FIDE_MOTIVO_INGRESO VARCHAR2(500) NOT NULL,
    FIDE_DIAGNOSTICO_INGRESO VARCHAR2(500) NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    CONSTRAINT fk_hosp_paciente FOREIGN KEY (FIDE_PACIENTE_CEDULA) REFERENCES FIDE_PACIENTES_TB(FIDE_PACIENTE_CEDULA),
    CONSTRAINT fk_hosp_sala FOREIGN KEY (FIDE_SALA_ID) REFERENCES FIDE_SALAS_TB(FIDE_SALA_ID),
    CONSTRAINT fk_hosp_empleado FOREIGN KEY (FIDE_EMPLEADO_CEDULA) REFERENCES FIDE_EMPLEADOS_TB(FIDE_EMPLEADO_CEDULA)
);

-- 3. Logs de acceso
CREATE TABLE FIDE_LOGS_ACCESO_TB (
    FIDE_LOG_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_USUARIO_ID NUMBER,
    FIDE_FECHA_ACCESO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_IP_ACCESO VARCHAR2(50),
    FIDE_ACCION VARCHAR2(100) NOT NULL,
    FIDE_RESULTADO VARCHAR2(20) NOT NULL,
    CONSTRAINT fk_log_usuario FOREIGN KEY (FIDE_USUARIO_ID) REFERENCES FIDE_USUARIOS_TB(FIDE_USUARIO_ID)
);

-- 4. Tokens de seguridad
CREATE TABLE FIDE_TOKENS_SEGURIDAD_TB (
    FIDE_TOKEN_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_USUARIO_ID NUMBER NOT NULL,
    FIDE_TOKEN VARCHAR2(255) NOT NULL,
    FIDE_FECHA_CREACION TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_FECHA_EXPIRACION TIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    CONSTRAINT fk_token_usuario FOREIGN KEY (FIDE_USUARIO_ID) REFERENCES FIDE_USUARIOS_TB(FIDE_USUARIO_ID)
);

-- 5. Permisos y roles-permisos
CREATE TABLE FIDE_PERMISOS_TB (
    FIDE_PERMISO_ID NUMBER PRIMARY KEY,
    FIDE_NOMBRE_PERMISO VARCHAR2(50) UNIQUE NOT NULL,
    FIDE_DESCRIPCION_PERMISO VARCHAR2(200)
);

CREATE TABLE FIDE_ROLES_PERMISOS_TB (
    FIDE_ROL_ID NUMBER,
    FIDE_PERMISO_ID NUMBER,
    PRIMARY KEY (FIDE_ROL_ID, FIDE_PERMISO_ID),
    CONSTRAINT fk_rol_permiso_rol FOREIGN KEY (FIDE_ROL_ID) REFERENCES FIDE_ROLES_TB(FIDE_ROL_ID),
    CONSTRAINT fk_rol_permiso_permiso FOREIGN KEY (FIDE_PERMISO_ID) REFERENCES FIDE_PERMISOS_TB(FIDE_PERMISO_ID)
);

-- 6. Notificaciones
CREATE TABLE FIDE_NOTIFICACIONES_TB (
    FIDE_NOTIFICACION_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_TIPO_NOTIFICACION VARCHAR2(50) NOT NULL,
    FIDE_DESTINATARIO VARCHAR2(200) NOT NULL,
    FIDE_ASUNTO VARCHAR2(200) NOT NULL,
    FIDE_CUERPO VARCHAR2(4000) NOT NULL,
    FIDE_FECHA_ENVIO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'PENDIENTE' NOT NULL
);

-- 7. Recibos
CREATE TABLE FIDE_RECIBOS_TB (
    FIDE_RECIBO_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_FACTURA_ID NUMBER NOT NULL,
    FIDE_FECHA_PAGO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_METODO_PAGO VARCHAR2(50) NOT NULL,
    FIDE_MONTO_PAGADO NUMBER(12,2) NOT NULL,
    FIDE_REFERENCIA_PAGO VARCHAR2(100),
    CONSTRAINT fk_recibo_factura FOREIGN KEY (FIDE_FACTURA_ID) REFERENCES FIDE_FACTURAS_TB(FIDE_FACTURA_ID)
);

-- 8. Actualización de usuarios para manejar bloqueo
ALTER TABLE FIDE_USUARIOS_TB ADD (
    FIDE_ESTADO_USUARIO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    FIDE_INTENTOS_FALLIDOS NUMBER DEFAULT 0,
    FIDE_ULTIMA_CONEXION TIMESTAMP
);

-- 9. Descuentos para facturación
CREATE TABLE FIDE_DESCUENTOS_TB (
    FIDE_DESCUENTO_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_CODIGO_DESCUENTO VARCHAR2(20) UNIQUE NOT NULL,
    FIDE_PORCENTAJE_DESCUENTO NUMBER(5,2) NOT NULL,
    FIDE_FECHA_INICIO TIMESTAMP NOT NULL,
    FIDE_FECHA_FIN TIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL
);

-- Actualización en facturas para soportar descuentos
ALTER TABLE FIDE_FACTURAS_TB ADD (
    FIDE_DESCUENTO_ID NUMBER,
    FIDE_PORCENTAJE_APLICADO NUMBER(5,2) DEFAULT 0,
    CONSTRAINT fk_factura_descuento FOREIGN KEY (FIDE_DESCUENTO_ID) REFERENCES FIDE_DESCUENTOS_TB(FIDE_DESCUENTO_ID)
);

--================================================
--================================================
-- Nuevas tablas
--================================================
--================================================

--Tabla para historial médico:

CREATE TABLE FIDE_HISTORIAL_MEDICO_TB (
    FIDE_HISTORIAL_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_PACIENTE_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_EMPLEADO_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_FECHA_REGISTRO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_DIAGNOSTICO VARCHAR2(1000) NOT NULL,
    FIDE_TRATAMIENTO VARCHAR2(1000),
    FIDE_OBSERVACIONES VARCHAR2(2000),
    CONSTRAINT fk_historial_paciente FOREIGN KEY (FIDE_PACIENTE_CEDULA) REFERENCES FIDE_PACIENTES_TB(FIDE_PACIENTE_CEDULA),
    CONSTRAINT fk_historial_empleado FOREIGN KEY (FIDE_EMPLEADO_CEDULA) REFERENCES FIDE_EMPLEADOS_TB(FIDE_EMPLEADO_CEDULA)
);

--Tabla para hospitalizaciones:

CREATE TABLE FIDE_HOSPITALIZACIONES_TB (
    FIDE_HOSPITALIZACION_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_PACIENTE_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_SALA_ID NUMBER NOT NULL,
    FIDE_EMPLEADO_CEDULA VARCHAR2(15) NOT NULL,
    FIDE_FECHA_INGRESO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_FECHA_ALTA TIMESTAMP,
    FIDE_MOTIVO_INGRESO VARCHAR2(500) NOT NULL,
    FIDE_DIAGNOSTICO_INGRESO VARCHAR2(500) NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    CONSTRAINT fk_hosp_paciente FOREIGN KEY (FIDE_PACIENTE_CEDULA) REFERENCES FIDE_PACIENTES_TB(FIDE_PACIENTE_CEDULA),
    CONSTRAINT fk_hosp_sala FOREIGN KEY (FIDE_SALA_ID) REFERENCES FIDE_SALAS_TB(FIDE_SALA_ID),
    CONSTRAINT fk_hosp_empleado FOREIGN KEY (FIDE_EMPLEADO_CEDULA) REFERENCES FIDE_EMPLEADOS_TB(FIDE_EMPLEADO_CEDULA)
);

--Tabla para recibos:

CREATE TABLE FIDE_RECIBOS_TB (
    FIDE_RECIBO_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_FACTURA_ID NUMBER NOT NULL,
    FIDE_FECHA_PAGO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_METODO_PAGO VARCHAR2(50) NOT NULL,
    FIDE_MONTO_PAGADO NUMBER(12,2) NOT NULL,
    FIDE_REFERENCIA_PAGO VARCHAR2(100),
    CONSTRAINT fk_recibo_factura FOREIGN KEY (FIDE_FACTURA_ID) REFERENCES FIDE_FACTURAS_TB(FIDE_FACTURA_ID)
);

--Tablas para seguridad y autenticación:

CREATE TABLE FIDE_LOGS_ACCESO_TB (
    FIDE_LOG_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_USUARIO_ID NUMBER,
    FIDE_FECHA_ACCESO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_IP_ACCESO VARCHAR2(50),
    FIDE_ACCION VARCHAR2(100) NOT NULL,
    FIDE_RESULTADO VARCHAR2(20) NOT NULL,
    CONSTRAINT fk_log_usuario FOREIGN KEY (FIDE_USUARIO_ID) REFERENCES FIDE_USUARIOS_TB(FIDE_USUARIO_ID)
);

CREATE TABLE FIDE_TOKENS_SEGURIDAD_TB (
    FIDE_TOKEN_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_USUARIO_ID NUMBER NOT NULL,
    FIDE_TOKEN VARCHAR2(255) NOT NULL,
    FIDE_FECHA_CREACION TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_FECHA_EXPIRACION TIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    CONSTRAINT fk_token_usuario FOREIGN KEY (FIDE_USUARIO_ID) REFERENCES FIDE_USUARIOS_TB(FIDE_USUARIO_ID)
);

-- Modificación a la tabla de usuarios existente
ALTER TABLE FIDE_USUARIOS_TB ADD (
    FIDE_ESTADO_USUARIO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL,
    FIDE_INTENTOS_FALLIDOS NUMBER DEFAULT 0,
    FIDE_ULTIMA_CONEXION TIMESTAMP
);

--Tablas para permisos:

CREATE TABLE FIDE_PERMISOS_TB (
    FIDE_PERMISO_ID NUMBER PRIMARY KEY,
    FIDE_NOMBRE_PERMISO VARCHAR2(50) UNIQUE NOT NULL,
    FIDE_DESCRIPCION_PERMISO VARCHAR2(200)
);

CREATE TABLE FIDE_ROLES_PERMISOS_TB (
    FIDE_ROL_ID NUMBER,
    FIDE_PERMISO_ID NUMBER,
    PRIMARY KEY (FIDE_ROL_ID, FIDE_PERMISO_ID),
    CONSTRAINT fk_rol_permiso_rol FOREIGN KEY (FIDE_ROL_ID) REFERENCES FIDE_ROLES_TB(FIDE_ROL_ID),
    CONSTRAINT fk_rol_permiso_permiso FOREIGN KEY (FIDE_PERMISO_ID) REFERENCES FIDE_PERMISOS_TB(FIDE_PERMISO_ID)
);

--Tabla para notificaciones:

CREATE TABLE FIDE_NOTIFICACIONES_TB (
    FIDE_NOTIFICACION_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_TIPO_NOTIFICACION VARCHAR2(50) NOT NULL,
    FIDE_DESTINATARIO VARCHAR2(200) NOT NULL,
    FIDE_ASUNTO VARCHAR2(200) NOT NULL,
    FIDE_CUERPO VARCHAR2(4000) NOT NULL,
    FIDE_FECHA_ENVIO TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'PENDIENTE' NOT NULL
);

--Tabla para descuentos:

CREATE TABLE FIDE_DESCUENTOS_TB (
    FIDE_DESCUENTO_ID NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    FIDE_CODIGO_DESCUENTO VARCHAR2(20) UNIQUE NOT NULL,
    FIDE_PORCENTAJE_DESCUENTO NUMBER(5,2) NOT NULL,
    FIDE_FECHA_INICIO TIMESTAMP NOT NULL,
    FIDE_FECHA_FIN TIMESTAMP NOT NULL,
    FIDE_ESTADO VARCHAR2(20) DEFAULT 'ACTIVO' NOT NULL
);

-- Actualización en facturas para soportar descuentos
ALTER TABLE FIDE_FACTURAS_TB ADD (
    FIDE_DESCUENTO_ID NUMBER,
    FIDE_PORCENTAJE_APLICADO NUMBER(5,2) DEFAULT 0,
    CONSTRAINT fk_factura_descuento FOREIGN KEY (FIDE_DESCUENTO_ID) REFERENCES FIDE_DESCUENTOS_TB(FIDE_DESCUENTO_ID)
);

-- ==============================================
--            VISTAS
-- Actualizacion de las vistas, para meter el sufijo FIDE y la abreviatura
--===============================================


-- Eliminar Vistas Existentes
DROP VIEW vista_empleados_activos;
DROP VIEW vista_pacientes_con_deuda;
DROP VIEW vista_historial_citas;
DROP VIEW vista_disponibilidad_salas;
DROP VIEW vista_estado_facturacion;


--Vista de Empleados Activos
CREATE OR REPLACE VIEW FIDE_VISTA_EMPLEADOS_ACTIVOS_V AS
SELECT FIDE_EMPLEADO_CEDULA, FIDE_NOMBRE_EMPLEADO, FIDE_APELLIDOS_EMPLEADO, FIDE_ESTADO_EMPLEADO 
FROM FIDE_EMPLEADOS_TB WHERE FIDE_ESTADO_EMPLEADO = 'ACTIVO';

--Vista de Pacientes con Deudas Pendientes
CREATE OR REPLACE VIEW FIDE_VISTA_PACIENTES_CON_DEUDA_V AS
SELECT p.FIDE_PACIENTE_CEDULA, p.FIDE_NOMBRE_PACIENTE, p.FIDE_APELLIDOS_PACIENTE, p.FIDE_DEUDA_PACIENTE, ep.FIDE_DESCRIPCION_ESTADO_PACIENTE AS estado
FROM FIDE_PACIENTES_TB p
JOIN FIDE_ESTADOS_PACIENTES_TB ep ON p.FIDE_ESTADO_PACIENTE_ID = ep.FIDE_ESTADO_PACIENTE_ID
WHERE p.FIDE_DEUDA_PACIENTE > 0;

--Vista de Historial de Citas

CREATE OR REPLACE VIEW FIDE_VISTA_HISTORIAL_CITAS_V AS
SELECT c.FIDE_CITA_ID, 
       c.FIDE_PACIENTE_CEDULA, 
       c.FIDE_EMPLEADO_CEDULA, 
       c.FIDE_FECHA_CITA, 
       c.FIDE_MOTIVO_CITA,
       p.FIDE_NOMBRE_PACIENTE, 
       e.FIDE_NOMBRE_EMPLEADO
FROM FIDE_CITAS_TB c
JOIN FIDE_PACIENTES_TB p ON c.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
JOIN FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA;

--Vista de Disponibilidad de Salas

CREATE OR REPLACE VIEW FIDE_VISTA_DISPONIBILIDAD_SALAS_V AS
SELECT s.FIDE_SALA_ID, s.FIDE_CAPACIDAD_SALA, ts.FIDE_DESCRIPCION_TIPO_SALA AS tipo, es.FIDE_DESCRIPCION_ESTADO_SALA AS estado
FROM FIDE_SALAS_TB s
JOIN FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
JOIN FIDE_ESTADOS_SALAS_TB es ON s.FIDE_ESTADO_SALA_ID = es.FIDE_ESTADO_SALA_ID
WHERE es.FIDE_DESCRIPCION_ESTADO_SALA = 'Disponible';

Vista de Estado de Facturación de Pacientes

CREATE OR REPLACE VIEW FIDE_VISTA_ESTADO_FACTURACION_V AS
SELECT f.FIDE_FACTURA_ID, 
       p.FIDE_NOMBRE_PACIENTE, 
       f.FIDE_TOTAL_FACTURA, 
       f.FIDE_ESTADO_FACTURA
FROM FIDE_FACTURAS_TB f
JOIN FIDE_PACIENTES_TB p ON f.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA;

-- ==============================================
--           NUEVAS VISTAS
--===============================================
--Vistas de empleados por tipo
CREATE OR REPLACE VIEW FIDE_VISTA_EMPLEADOS_POR_TIPO_V AS
SELECT 
    e.FIDE_EMPLEADO_CEDULA, 
    e.FIDE_NOMBRE_EMPLEADO, 
    e.FIDE_APELLIDOS_EMPLEADO, 
    te.FIDE_DESCRIPCION_TIPO_EMPLEADO 
FROM 
    FIDE_EMPLEADOS_TB e
JOIN 
    FIDE_TIPOS_EMPLEADOS_TB te ON e.FIDE_TIPO_EMPLEADO_ID = te.FIDE_TIPO_EMPLEADO_ID;
   
    
--Vistas de pacientes por estado
CREATE OR REPLACE VIEW FIDE_VISTA_PACIENTES_POR_ESTADO_V AS
SELECT 
    p.FIDE_PACIENTE_CEDULA, 
    p.FIDE_NOMBRE_PACIENTE, 
    ep.FIDE_DESCRIPCION_ESTADO_PACIENTE 
FROM 
    FIDE_PACIENTES_TB p
JOIN 
    FIDE_ESTADOS_PACIENTES_TB ep ON p.FIDE_ESTADO_PACIENTE_ID = ep.FIDE_ESTADO_PACIENTE_ID;


--Vistas de citas por paciente
CREATE OR REPLACE VIEW FIDE_VISTA_CITAS_POR_PACIENTE_V AS
SELECT 
    c.FIDE_CITA_ID, 
    c.FIDE_PACIENTE_CEDULA, 
    c.FIDE_EMPLEADO_CEDULA, 
    c.FIDE_FECHA_CITA, 
    c.FIDE_MOTIVO_CITA,
    p.FIDE_NOMBRE_PACIENTE,
    e.FIDE_NOMBRE_EMPLEADO
FROM 
    FIDE_CITAS_TB c
JOIN 
    FIDE_PACIENTES_TB p ON c.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
JOIN 
    FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA;
    
    
--Vistas de facturas pendientes
CREATE OR REPLACE VIEW FIDE_VISTA_FACTURAS_PENDIENTES_V AS
SELECT 
    f.FIDE_FACTURA_ID, 
    f.FIDE_PACIENTE_CEDULA,
    p.FIDE_NOMBRE_PACIENTE,
    f.FIDE_TOTAL_FACTURA,
    f.FIDE_ESTADO_FACTURA
FROM 
    FIDE_FACTURAS_TB f
JOIN 
    FIDE_PACIENTES_TB p ON f.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
WHERE 
    f.FIDE_ESTADO_FACTURA = 'PENDIENTE';
    

--Vistas de hospitalizaciones activas
CREATE OR REPLACE VIEW FIDE_VISTA_HOSPITALIZACIONES_ACTIVAS_V AS
SELECT 
    h.FIDE_HOSPITALIZACION_ID, 
    h.FIDE_PACIENTE_CEDULA, 
    p.FIDE_NOMBRE_PACIENTE, 
    h.FIDE_FECHA_INGRESO, 
    h.FIDE_MOTIVO_INGRESO,
    ts.FIDE_DESCRIPCION_TIPO_SALA
FROM 
    FIDE_HOSPITALIZACIONES_TB h
JOIN 
    FIDE_PACIENTES_TB p ON h.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
JOIN 
    FIDE_SALAS_TB s ON h.FIDE_SALA_ID = s.FIDE_SALA_ID
JOIN 
    FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
WHERE 
    h.FIDE_FECHA_ALTA IS NULL;
    
    
--Vistas de notificaciones pendientes
CREATE OR REPLACE VIEW FIDE_VISTA_NOTIFICACIONES_PENDIENTES_V AS
SELECT 
    n.FIDE_NOTIFICACION_ID,
    n.FIDE_TIPO_NOTIFICACION,
    n.FIDE_DESTINATARIO,
    n.FIDE_ASUNTO,
    n.FIDE_FECHA_ENVIO
FROM 
    FIDE_NOTIFICACIONES_TB n
WHERE 
    n.FIDE_ESTADO = 'PENDIENTE';
    
    
--Vistas de Logs de acceso por usuario
CREATE OR REPLACE VIEW FIDE_VISTA_LOGS_ACCESO_POR_USUARIO_V AS
SELECT 
    la.FIDE_LOG_ID,
    u.FIDE_USUARIO_ID,
    u.FIDE_NOMBRE_USUARIO,
    la.FIDE_FECHA_ACCESO,
    la.FIDE_IP_ACCESO,
    la.FIDE_ACCION,
    la.FIDE_RESULTADO
FROM 
    FIDE_LOGS_ACCESO_TB la
LEFT JOIN 
    FIDE_USUARIOS_TB u ON la.FIDE_USUARIO_ID = u.FIDE_USUARIO_ID
ORDER BY 
    la.FIDE_FECHA_ACCESO DESC;



-- ==============================================
--           TRIGGUERS 
--===============================================
--Trigger para insertar empleados
CREATE OR REPLACE TRIGGER FIDE_TRG_INSERTAR_EMPLEADO
BEFORE INSERT ON FIDE_EMPLEADOS_TB
FOR EACH ROW
BEGIN
    IF :NEW.FIDE_ESTADO_EMPLEADO IS NULL THEN
        :NEW.FIDE_ESTADO_EMPLEADO := 'ACTIVO';
    END IF;
END;
/


--Trigger para actualizar facturas
CREATE OR REPLACE TRIGGER FIDE_TRG_ACTUALIZAR_FACTURA
BEFORE UPDATE ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
    IF :NEW.FIDE_TOTAL_FACTURA <> :OLD.FIDE_TOTAL_FACTURA THEN
        :NEW.FIDE_ESTADO_FACTURA := 'PENDIENTE';
    END IF;
END;
/


--Trigger para eliminar pacientes
CREATE OR REPLACE TRIGGER FIDE_TRG_ELIMINAR_PACIENTE
BEFORE DELETE ON FIDE_PACIENTES_TB
FOR EACH ROW
DECLARE
    v_contador NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_contador 
    FROM FIDE_FACTURAS_TB f 
    WHERE f.FIDE_PACIENTE_CEDULA = :OLD.FIDE_PACIENTE_CEDULA AND f.FIDE_ESTADO_FACTURA = 'PENDIENTE';
    
    IF v_contador > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar el paciente. Existen facturas pendientes.');
    END IF;
END;
/


--Trigger para resgistro de acceso
CREATE OR REPLACE TRIGGER FIDE_TRG_INSERTAR_LOG_ACCESO
BEFORE INSERT ON FIDE_LOGS_ACCESO_TB
FOR EACH ROW
BEGIN
    IF :NEW.FIDE_RESULTADO IS NULL THEN
        :NEW.FIDE_RESULTADO := 'FALLO';
    END IF;
END;
/


--Trigger para actualziar estado de hospitalizacion
CREATE OR REPLACE TRIGGER FIDE_TRG_ACTUALIZAR_HOSPITALIZACION
BEFORE UPDATE ON FIDE_HOSPITALIZACIONES_TB
FOR EACH ROW
BEGIN
    IF :NEW.FIDE_FECHA_ALTA IS NOT NULL THEN
        :NEW.FIDE_ESTADO := 'ALTA';
    END IF;
END;
/




-- ==============================================
-- ============ PAQUETES ========================
-- ==============================================
-- Actualizacion de los cursores por indicacion de la profe
-- ya los cursores no en bloques si no en procedimientos 
-- dentro de paquetes, implementacion de las nuevas tablas
-- para un mejor desempeño, tambien la actualizacion de la nomenclatura 
-- con el sufijo FIDE y la abreviatura
--===============================================
-- ==============================================
-- ==============================================

-- 1. Paquete de Empleados Activos (Actualizado)
CREATE OR REPLACE PACKAGE FIDE_EMPLEADOS_ACTIVOS_PKG AS
    PROCEDURE FIDE_LISTAR_EMPLEADOS_ACTIVOS_PROC;
END FIDE_EMPLEADOS_ACTIVOS_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_EMPLEADOS_ACTIVOS_PKG AS
    PROCEDURE FIDE_LISTAR_EMPLEADOS_ACTIVOS_PROC IS
        CURSOR cur_empleados_activos IS 
            SELECT 
                e.FIDE_EMPLEADO_CEDULA, 
                e.FIDE_NOMBRE_EMPLEADO, 
                e.FIDE_APELLIDOS_EMPLEADO, 
                e.FIDE_TELEFONO_EMPLEADO,
                e.FIDE_DIRECCION_EMPLEADO,
                e.FIDE_CORREO_EMPLEADO,
                e.FIDE_ESTADO_EMPLEADO,
                te.FIDE_DESCRIPCION_TIPO_EMPLEADO
            FROM 
                FIDE_EMPLEADOS_TB e
            JOIN 
                FIDE_TIPOS_EMPLEADOS_TB te ON e.FIDE_TIPO_EMPLEADO_ID = te.FIDE_TIPO_EMPLEADO_ID
            WHERE 
                e.FIDE_ESTADO_EMPLEADO = 'ACTIVO';
    BEGIN
        OPEN cur_empleados_activos;
         
        CLOSE cur_empleados_activos;
    END FIDE_LISTAR_EMPLEADOS_ACTIVOS_PROC;
END FIDE_EMPLEADOS_ACTIVOS_PKG;
/

-- 2. Paquete de Pacientes con Deuda (Actualizado)
CREATE OR REPLACE PACKAGE FIDE_PACIENTES_DEUDA_PKG AS
    PROCEDURE FIDE_LISTAR_PACIENTES_CON_DEUDA_PROC;
END FIDE_PACIENTES_DEUDA_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PACIENTES_DEUDA_PKG AS
    PROCEDURE FIDE_LISTAR_PACIENTES_CON_DEUDA_PROC IS
        CURSOR cur_pacientes_con_deuda IS 
            SELECT 
                p.FIDE_PACIENTE_CEDULA, 
                p.FIDE_NOMBRE_PACIENTE,
                p.FIDE_APELLIDOS_PACIENTE,
                p.FIDE_TELEFONO_PACIENTE,
                p.FIDE_CORREO_PACIENTE,
                ep.FIDE_DESCRIPCION_ESTADO_PACIENTE, 
                p.FIDE_DEUDA_PACIENTE,
                (SELECT COUNT(*) FROM FIDE_FACTURAS_TB f WHERE f.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA AND f.FIDE_ESTADO_FACTURA = 'PENDIENTE') AS facturas_pendientes
            FROM 
                FIDE_PACIENTES_TB p
            JOIN 
                FIDE_ESTADOS_PACIENTES_TB ep ON p.FIDE_ESTADO_PACIENTE_ID = ep.FIDE_ESTADO_PACIENTE_ID
            WHERE 
                p.FIDE_DEUDA_PACIENTE > 0
            ORDER BY 
                p.FIDE_DEUDA_PACIENTE DESC;
    BEGIN
        OPEN cur_pacientes_con_deuda;
         
        CLOSE cur_pacientes_con_deuda;
    END FIDE_LISTAR_PACIENTES_CON_DEUDA_PROC;
END FIDE_PACIENTES_DEUDA_PKG;
/

-- 3. Paquete de Historial de Citas (Actualizado con nueva tabla de historial médico)
CREATE OR REPLACE PACKAGE FIDE_HISTORIAL_CITAS_PKG AS
    PROCEDURE FIDE_LISTAR_HISTORIAL_CITAS_PROC;
    PROCEDURE FIDE_LISTAR_HISTORIAL_CITAS_PACIENTE_PROC(p_cedula_paciente IN VARCHAR2);
END FIDE_HISTORIAL_CITAS_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_HISTORIAL_CITAS_PKG AS
    PROCEDURE FIDE_LISTAR_HISTORIAL_CITAS_PROC IS
        CURSOR cur_historial_citas IS 
            SELECT 
                c.FIDE_CITA_ID, 
                c.FIDE_PACIENTE_CEDULA, 
                c.FIDE_EMPLEADO_CEDULA, 
                c.FIDE_FECHA_CITA, 
                c.FIDE_MOTIVO_CITA,
                c.FIDE_SALA_ID,
                p.FIDE_NOMBRE_PACIENTE,
                p.FIDE_APELLIDOS_PACIENTE,
                e.FIDE_NOMBRE_EMPLEADO,
                e.FIDE_APELLIDOS_EMPLEADO,
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                (SELECT COUNT(*) FROM FIDE_HISTORIAL_MEDICO_TB hm 
                 WHERE hm.FIDE_PACIENTE_CEDULA = c.FIDE_PACIENTE_CEDULA) AS registros_historial
            FROM 
                FIDE_CITAS_TB c
            JOIN 
                FIDE_PACIENTES_TB p ON c.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
            JOIN 
                FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA
            JOIN
                FIDE_SALAS_TB s ON c.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            ORDER BY 
                c.FIDE_FECHA_CITA DESC;
    BEGIN
        OPEN cur_historial_citas;
         
        CLOSE cur_historial_citas;
    END FIDE_LISTAR_HISTORIAL_CITAS_PROC;
    
    PROCEDURE FIDE_LISTAR_HISTORIAL_CITAS_PACIENTE_PROC(p_cedula_paciente IN VARCHAR2) IS
        CURSOR cur_historial_citas_paciente IS 
            SELECT 
                c.FIDE_CITA_ID, 
                c.FIDE_FECHA_CITA, 
                c.FIDE_MOTIVO_CITA,
                e.FIDE_NOMBRE_EMPLEADO,
                e.FIDE_APELLIDOS_EMPLEADO,
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                hm.FIDE_HISTORIAL_ID,
                hm.FIDE_DIAGNOSTICO,
                hm.FIDE_TRATAMIENTO
            FROM 
                FIDE_CITAS_TB c
            JOIN 
                FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA
            JOIN
                FIDE_SALAS_TB s ON c.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            LEFT JOIN
                FIDE_HISTORIAL_MEDICO_TB hm ON c.FIDE_PACIENTE_CEDULA = hm.FIDE_PACIENTE_CEDULA
                                         AND TRUNC(c.FIDE_FECHA_CITA) = TRUNC(hm.FIDE_FECHA_REGISTRO)
            WHERE 
                c.FIDE_PACIENTE_CEDULA = p_cedula_paciente
            ORDER BY 
                c.FIDE_FECHA_CITA DESC;
    BEGIN
        OPEN cur_historial_citas_paciente;
         
        CLOSE cur_historial_citas_paciente;
    END FIDE_LISTAR_HISTORIAL_CITAS_PACIENTE_PROC;
END FIDE_HISTORIAL_CITAS_PKG;
/

-- 4. Paquete de Salas Disponibles (Actualizado)
CREATE OR REPLACE PACKAGE FIDE_SALAS_DISPONIBLES_PKG AS
    PROCEDURE FIDE_LISTAR_SALAS_DISPONIBLES_PROC;
    PROCEDURE FIDE_LISTAR_SALAS_DISPONIBLES_FECHA_PROC(p_fecha IN TIMESTAMP);
END FIDE_SALAS_DISPONIBLES_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_SALAS_DISPONIBLES_PKG AS
    PROCEDURE FIDE_LISTAR_SALAS_DISPONIBLES_PROC IS
        CURSOR cur_salas_disponibles IS 
            SELECT 
                s.FIDE_SALA_ID, 
                s.FIDE_CAPACIDAD_SALA, 
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                es.FIDE_DESCRIPCION_ESTADO_SALA,
                s.FIDE_PRECIO_HORA_SALA,
                (SELECT COUNT(*) FROM FIDE_CITAS_TB c 
                 WHERE c.FIDE_SALA_ID = s.FIDE_SALA_ID 
                 AND c.FIDE_FECHA_CITA > SYSTIMESTAMP) AS citas_programadas,
                (SELECT COUNT(*) FROM FIDE_ALQUILERES_TB a 
                 WHERE a.FIDE_SALA_ID = s.FIDE_SALA_ID 
                 AND (a.FIDE_FECHA_FIN_ALQUILER IS NULL OR a.FIDE_FECHA_FIN_ALQUILER > SYSTIMESTAMP)) AS alquileres_activos
            FROM 
                FIDE_SALAS_TB s
            JOIN 
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            JOIN 
                FIDE_ESTADOS_SALAS_TB es ON s.FIDE_ESTADO_SALA_ID = es.FIDE_ESTADO_SALA_ID
            WHERE 
                es.FIDE_DESCRIPCION_ESTADO_SALA = 'Disponible';
    BEGIN
        OPEN cur_salas_disponibles;
         
        CLOSE cur_salas_disponibles;
    END FIDE_LISTAR_SALAS_DISPONIBLES_PROC;
    
    PROCEDURE FIDE_LISTAR_SALAS_DISPONIBLES_FECHA_PROC(p_fecha IN TIMESTAMP) IS
        CURSOR cur_salas_disponibles_fecha IS 
            SELECT 
                s.FIDE_SALA_ID, 
                s.FIDE_CAPACIDAD_SALA, 
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                es.FIDE_DESCRIPCION_ESTADO_SALA,
                s.FIDE_PRECIO_HORA_SALA
            FROM 
                FIDE_SALAS_TB s
            JOIN 
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            JOIN 
                FIDE_ESTADOS_SALAS_TB es ON s.FIDE_ESTADO_SALA_ID = es.FIDE_ESTADO_SALA_ID
            WHERE 
                es.FIDE_DESCRIPCION_ESTADO_SALA = 'Disponible'
                AND NOT EXISTS (
                    SELECT 1 FROM FIDE_CITAS_TB c 
                    WHERE c.FIDE_SALA_ID = s.FIDE_SALA_ID 
                    AND TRUNC(c.FIDE_FECHA_CITA) = TRUNC(p_fecha)
                )
                AND NOT EXISTS (
                    SELECT 1 FROM FIDE_ALQUILERES_TB a 
                    WHERE a.FIDE_SALA_ID = s.FIDE_SALA_ID 
                    AND p_fecha BETWEEN a.FIDE_FECHA_INICIO_ALQUILER AND 
                    COALESCE(a.FIDE_FECHA_FIN_ALQUILER, TO_TIMESTAMP('9999-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'))
                );
    BEGIN
        OPEN cur_salas_disponibles_fecha;
         
        CLOSE cur_salas_disponibles_fecha;
    END FIDE_LISTAR_SALAS_DISPONIBLES_FECHA_PROC;
END FIDE_SALAS_DISPONIBLES_PKG;
/

-- 5. Paquete de Estado de Facturación (Actualizado con tabla de recibos)
CREATE OR REPLACE PACKAGE FIDE_ESTADO_FACTURACION_PKG AS
    PROCEDURE FIDE_LISTAR_ESTADO_FACTURACION_PROC;
    PROCEDURE FIDE_LISTAR_ESTADO_FACTURACION_PACIENTE_PROC(p_cedula_paciente IN VARCHAR2);
END FIDE_ESTADO_FACTURACION_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_ESTADO_FACTURACION_PKG AS
    PROCEDURE FIDE_LISTAR_ESTADO_FACTURACION_PROC IS
        CURSOR cur_estado_facturacion IS 
            SELECT 
                f.FIDE_FACTURA_ID, 
                f.FIDE_PACIENTE_CEDULA, 
                p.FIDE_NOMBRE_PACIENTE,
                p.FIDE_APELLIDOS_PACIENTE,
                f.FIDE_TOTAL_FACTURA, 
                f.FIDE_ESTADO_FACTURA,
                f.FIDE_PORCENTAJE_APLICADO,
                (SELECT COUNT(*) FROM FIDE_DETALLES_FACTURAS_TB df 
                 WHERE df.FIDE_FACTURA_ID = f.FIDE_FACTURA_ID) AS num_detalles,
                (SELECT COUNT(*) FROM FIDE_RECIBOS_TB r 
                 WHERE r.FIDE_FACTURA_ID = f.FIDE_FACTURA_ID) AS recibos_pagos
            FROM 
                FIDE_FACTURAS_TB f
            JOIN 
                FIDE_PACIENTES_TB p ON f.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
            ORDER BY
                f.FIDE_ESTADO_FACTURA, f.FIDE_FACTURA_ID DESC;
    BEGIN
        OPEN cur_estado_facturacion;
         
        CLOSE cur_estado_facturacion;
    END FIDE_LISTAR_ESTADO_FACTURACION_PROC;
    
    PROCEDURE FIDE_LISTAR_ESTADO_FACTURACION_PACIENTE_PROC(p_cedula_paciente IN VARCHAR2) IS
        CURSOR cur_facturas_paciente IS 
            SELECT 
                f.FIDE_FACTURA_ID, 
                f.FIDE_TOTAL_FACTURA, 
                f.FIDE_ESTADO_FACTURA,
                f.FIDE_PORCENTAJE_APLICADO,
                (SELECT COUNT(*) FROM FIDE_DETALLES_FACTURAS_TB df 
                 WHERE df.FIDE_FACTURA_ID = f.FIDE_FACTURA_ID) AS num_detalles
            FROM 
                FIDE_FACTURAS_TB f
            WHERE 
                f.FIDE_PACIENTE_CEDULA = p_cedula_paciente
            ORDER BY
                f.FIDE_ESTADO_FACTURA, f.FIDE_FACTURA_ID DESC;
    BEGIN
        OPEN cur_facturas_paciente;
         
        CLOSE cur_facturas_paciente;
    END FIDE_LISTAR_ESTADO_FACTURACION_PACIENTE_PROC;
END FIDE_ESTADO_FACTURACION_PKG;
/

-- 6. Paquete de Medicamentos Disponibles (Actualizado)
CREATE OR REPLACE PACKAGE FIDE_MEDICAMENTOS_DISPONIBLES_PKG AS
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_DISPONIBLES_PROC;
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_AGOTADOS_PROC;
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_RESERVADOS_PROC;
END FIDE_MEDICAMENTOS_DISPONIBLES_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_MEDICAMENTOS_DISPONIBLES_PKG AS
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_DISPONIBLES_PROC IS
        CURSOR cur_medicamentos_disponibles IS 
            SELECT 
                m.FIDE_MEDICAMENTO_ID, 
                m.FIDE_NOMBRE_MEDICAMENTO, 
                m.FIDE_PRECIO_MEDICAMENTO,
                m.FIDE_CANTIDAD_MEDICAMENTO,
                m.FIDE_INFORMACION_MEDICAMENTO,
                (SELECT COUNT(*) FROM FIDE_MEDICAMENTOS_RESERVADOS_TB mr 
                 WHERE mr.FIDE_MEDICAMENTO_ID = m.FIDE_MEDICAMENTO_ID) AS cantidad_reservada
            FROM 
                FIDE_MEDICAMENTOS_TB m
            WHERE 
                m.FIDE_CANTIDAD_MEDICAMENTO > 0
            ORDER BY
                m.FIDE_MEDICAMENTO_ID;
    BEGIN
        OPEN cur_medicamentos_disponibles;
         
        CLOSE cur_medicamentos_disponibles;
    END FIDE_LISTAR_MEDICAMENTOS_DISPONIBLES_PROC;
    
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_AGOTADOS_PROC IS
        CURSOR cur_medicamentos_agotados IS 
            SELECT 
                FIDE_MEDICAMENTO_ID, 
                FIDE_NOMBRE_MEDICAMENTO, 
                FIDE_PRECIO_MEDICAMENTO,
                FIDE_INFORMACION_MEDICAMENTO
            FROM 
                FIDE_MEDICAMENTOS_TB
            WHERE 
                FIDE_CANTIDAD_MEDICAMENTO = 0
            ORDER BY
                FIDE_MEDICAMENTO_ID;
    BEGIN
        OPEN cur_medicamentos_agotados;
         
        CLOSE cur_medicamentos_agotados;
    END FIDE_LISTAR_MEDICAMENTOS_AGOTADOS_PROC;
    
    PROCEDURE FIDE_LISTAR_MEDICAMENTOS_RESERVADOS_PROC IS
        CURSOR cur_medicamentos_reservados IS 
            SELECT 
                mr.FIDE_RESERVA_ID,
                mr.FIDE_PACIENTE_CEDULA,
                p.FIDE_NOMBRE_PACIENTE,
                p.FIDE_APELLIDOS_PACIENTE,
                mr.FIDE_MEDICAMENTO_ID,
                m.FIDE_NOMBRE_MEDICAMENTO,
                mr.FIDE_CANTIDAD_MEDICAMENTO,
                m.FIDE_PRECIO_MEDICAMENTO
            FROM 
                FIDE_MEDICAMENTOS_RESERVADOS_TB mr
            JOIN 
                FIDE_MEDICAMENTOS_TB m ON mr.FIDE_MEDICAMENTO_ID = m.FIDE_MEDICAMENTO_ID
            JOIN 
                FIDE_PACIENTES_TB p ON mr.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
            ORDER BY
                mr.FIDE_RESERVA_ID;
    BEGIN
        OPEN cur_medicamentos_reservados;
         
        CLOSE cur_medicamentos_reservados;
    END FIDE_LISTAR_MEDICAMENTOS_RESERVADOS_PROC;
END FIDE_MEDICAMENTOS_DISPONIBLES_PKG;
/

-- 7. Paquete de Alquileres (Actualizado)

CREATE OR REPLACE PACKAGE FIDE_ALQUILERES_PKG AS
    PROCEDURE FIDE_LISTAR_ALQUILERES_PROC;
    PROCEDURE FIDE_LISTAR_ALQUILERES_ACTIVOS_PROC;
    PROCEDURE FIDE_CALCULAR_INGRESOS_ALQUILERES_PROC(p_fecha_inicio IN TIMESTAMP, p_fecha_fin IN TIMESTAMP);
END FIDE_ALQUILERES_PKG;
/

CREATE OR REPLACE PACKAGE BODY FIDE_ALQUILERES_PKG AS
    PROCEDURE FIDE_LISTAR_ALQUILERES_PROC IS
        CURSOR cur_alquileres IS 
            SELECT 
                a.FIDE_ALQUILER_ID, 
                a.FIDE_SALA_ID, 
                a.FIDE_DOCTOR_ALQUILER, 
                a.FIDE_FECHA_INICIO_ALQUILER, 
                a.FIDE_FECHA_FIN_ALQUILER,
                a.FIDE_TOTAL_ALQUILER,
                s.FIDE_CAPACIDAD_SALA,
                s.FIDE_PRECIO_HORA_SALA,
                ts.FIDE_DESCRIPCION_TIPO_SALA
            FROM 
                FIDE_ALQUILERES_TB a
            JOIN
                FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            ORDER BY
                CASE WHEN a.FIDE_FECHA_FIN_ALQUILER IS NULL THEN 1 ELSE 0 END DESC,
                a.FIDE_FECHA_INICIO_ALQUILER DESC;
    BEGIN
        OPEN cur_alquileres;
        CLOSE cur_alquileres;
    END FIDE_LISTAR_ALQUILERES_PROC;
    
    PROCEDURE FIDE_LISTAR_ALQUILERES_ACTIVOS_PROC IS
        CURSOR cur_alquileres_activos IS 
            SELECT 
                a.FIDE_ALQUILER_ID, 
                a.FIDE_SALA_ID, 
                a.FIDE_DOCTOR_ALQUILER, 
                a.FIDE_FECHA_INICIO_ALQUILER,
                s.FIDE_PRECIO_HORA_SALA,
                ts.FIDE_DESCRIPCION_TIPO_SALA,
                -- Convertir la diferencia de timestamps a días y luego multiplicar por 24
                ROUND(EXTRACT(DAY FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER)) * 24 + 
                     EXTRACT(HOUR FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER)) +
                     EXTRACT(MINUTE FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER))/60, 2) AS duracion_horas,
                -- Usar el resultado calculado para el costo
                ROUND((EXTRACT(DAY FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER)) * 24 + 
                     EXTRACT(HOUR FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER)) +
                     EXTRACT(MINUTE FROM (SYSTIMESTAMP - a.FIDE_FECHA_INICIO_ALQUILER))/60) * s.FIDE_PRECIO_HORA_SALA, 2) AS costo_actual
            FROM 
                FIDE_ALQUILERES_TB a
            JOIN
                FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            WHERE
                a.FIDE_FECHA_FIN_ALQUILER IS NULL
            ORDER BY
                a.FIDE_FECHA_INICIO_ALQUILER;
    BEGIN
        OPEN cur_alquileres_activos;
        CLOSE cur_alquileres_activos;
    END FIDE_LISTAR_ALQUILERES_ACTIVOS_PROC;
    
    PROCEDURE FIDE_CALCULAR_INGRESOS_ALQUILERES_PROC(p_fecha_inicio IN TIMESTAMP, p_fecha_fin IN TIMESTAMP) IS
        CURSOR cur_ingresos_alquileres IS 
            SELECT 
                a.FIDE_ALQUILER_ID, 
                a.FIDE_SALA_ID, 
                a.FIDE_DOCTOR_ALQUILER, 
                a.FIDE_FECHA_INICIO_ALQUILER, 
                a.FIDE_FECHA_FIN_ALQUILER,
                a.FIDE_TOTAL_ALQUILER,
                ts.FIDE_DESCRIPCION_TIPO_SALA
            FROM 
                FIDE_ALQUILERES_TB a
            JOIN
                FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
            JOIN
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
            WHERE
                (a.FIDE_FECHA_INICIO_ALQUILER BETWEEN p_fecha_inicio AND p_fecha_fin)
                OR (a.FIDE_FECHA_FIN_ALQUILER BETWEEN p_fecha_inicio AND p_fecha_fin)
                OR (a.FIDE_FECHA_INICIO_ALQUILER <= p_fecha_inicio AND 
                    (a.FIDE_FECHA_FIN_ALQUILER >= p_fecha_fin OR a.FIDE_FECHA_FIN_ALQUILER IS NULL))
            ORDER BY
                a.FIDE_FECHA_INICIO_ALQUILER;
    BEGIN
        OPEN cur_ingresos_alquileres;
        CLOSE cur_ingresos_alquileres;
    END FIDE_CALCULAR_INGRESOS_ALQUILERES_PROC;
END FIDE_ALQUILERES_PKG;
/


-- 8. Paquete de Pacientes Hospitalizados (Actualizado con nueva tabla)
CREATE OR REPLACE PACKAGE FIDE_PACIENTES_HOSPITALIZADOS_PKG AS 
    PROCEDURE FIDE_LISTAR_PACIENTES_HOSPITALIZADOS_PROC; 
    PROCEDURE FIDE_LISTAR_HISTORIAL_HOSPITALIZACIONES_PROC(p_cedula_paciente IN VARCHAR2); 
END FIDE_PACIENTES_HOSPITALIZADOS_PKG; 
/

CREATE OR REPLACE PACKAGE BODY FIDE_PACIENTES_HOSPITALIZADOS_PKG AS 
    PROCEDURE FIDE_LISTAR_PACIENTES_HOSPITALIZADOS_PROC IS 
        CURSOR cur_pacientes_hospitalizados IS 
            SELECT 
                h.FIDE_HOSPITALIZACION_ID, 
                h.FIDE_PACIENTE_CEDULA, 
                p.FIDE_NOMBRE_PACIENTE, 
                p.FIDE_APELLIDOS_PACIENTE, 
                h.FIDE_SALA_ID, 
                ts.FIDE_DESCRIPCION_TIPO_SALA, 
                h.FIDE_EMPLEADO_CEDULA, 
                e.FIDE_NOMBRE_EMPLEADO, 
                e.FIDE_APELLIDOS_EMPLEADO, 
                h.FIDE_FECHA_INGRESO, 
                h.FIDE_MOTIVO_INGRESO, 
                h.FIDE_DIAGNOSTICO_INGRESO, 
                -- Usar EXTRACT para calcular días de hospitalización correctamente
                ROUND(
                    EXTRACT(DAY FROM (SYSTIMESTAMP - h.FIDE_FECHA_INGRESO)) + 
                    EXTRACT(HOUR FROM (SYSTIMESTAMP - h.FIDE_FECHA_INGRESO))/24 +
                    EXTRACT(MINUTE FROM (SYSTIMESTAMP - h.FIDE_FECHA_INGRESO))/(24*60), 
                    1
                ) AS dias_hospitalizacion 
            FROM 
                FIDE_HOSPITALIZACIONES_TB h 
            JOIN 
                FIDE_PACIENTES_TB p ON h.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA 
            JOIN 
                FIDE_EMPLEADOS_TB e ON h.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA 
            JOIN 
                FIDE_SALAS_TB s ON h.FIDE_SALA_ID = s.FIDE_SALA_ID 
            JOIN 
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID 
            WHERE 
                h.FIDE_FECHA_ALTA IS NULL 
                AND h.FIDE_ESTADO = 'ACTIVO' 
            ORDER BY 
                h.FIDE_FECHA_INGRESO; 
    BEGIN 
        OPEN cur_pacientes_hospitalizados; 
        CLOSE cur_pacientes_hospitalizados; 
    END FIDE_LISTAR_PACIENTES_HOSPITALIZADOS_PROC; 
    
    PROCEDURE FIDE_LISTAR_HISTORIAL_HOSPITALIZACIONES_PROC(p_cedula_paciente IN VARCHAR2) IS 
        CURSOR cur_historial_hospitalizaciones IS 
            SELECT 
                h.FIDE_HOSPITALIZACION_ID, 
                h.FIDE_SALA_ID, 
                ts.FIDE_DESCRIPCION_TIPO_SALA, 
                h.FIDE_EMPLEADO_CEDULA, 
                e.FIDE_NOMBRE_EMPLEADO, 
                e.FIDE_APELLIDOS_EMPLEADO, 
                h.FIDE_FECHA_INGRESO, 
                h.FIDE_FECHA_ALTA, 
                h.FIDE_MOTIVO_INGRESO, 
                h.FIDE_DIAGNOSTICO_INGRESO, 
                h.FIDE_ESTADO 
            FROM 
                FIDE_HOSPITALIZACIONES_TB h 
            JOIN 
                FIDE_EMPLEADOS_TB e ON h.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA 
            JOIN 
                FIDE_SALAS_TB s ON h.FIDE_SALA_ID = s.FIDE_SALA_ID 
            JOIN 
                FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID 
            WHERE 
                h.FIDE_PACIENTE_CEDULA = p_cedula_paciente 
            ORDER BY 
                h.FIDE_FECHA_INGRESO DESC;
    BEGIN 
        OPEN cur_historial_hospitalizaciones; 
        CLOSE cur_historial_hospitalizaciones; 
    END FIDE_LISTAR_HISTORIAL_HOSPITALIZACIONES_PROC; 
END FIDE_PACIENTES_HOSPITALIZADOS_PKG;
/

-- ==============================================
-- ==============================================
-- ==============================================
-- NUEVAS FUNCIONES
--===============================================
-- ==============================================
-- ==============================================
--Funcion para Calcular el Total de Factura con Descuento
CREATE OR REPLACE FUNCTION FIDE_FN_CALCULAR_TOTAL_FACTURA(
    p_factura_id IN NUMBER
) RETURN NUMBER IS
    v_total_factura NUMBER;
    v_porcentaje_descuento NUMBER;
    v_total_con_descuento NUMBER;
BEGIN
    SELECT FIDE_TOTAL_FACTURA, FIDE_PORCENTAJE_APLICADO 
    INTO v_total_factura, v_porcentaje_descuento
    FROM FIDE_FACTURAS_TB 
    WHERE FIDE_FACTURA_ID = p_factura_id;

    v_total_con_descuento := v_total_factura - (v_total_factura * 
    (v_porcentaje_descuento / 100));
    
    RETURN v_total_con_descuento;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;
/


--Funcion para obtener el Nombre Completo del Paciente
CREATE OR REPLACE FUNCTION FIDE_FN_OBTENER_NOMBRE_PACIENTE(
    p_cedula IN VARCHAR2
) RETURN VARCHAR2 IS
    v_nombre_completo VARCHAR2(300);
BEGIN
    SELECT FIDE_NOMBRE_PACIENTE || ' ' || FIDE_APELLIDOS_PACIENTE
    INTO v_nombre_completo
    FROM FIDE_PACIENTES_TB
    WHERE FIDE_PACIENTE_CEDULA = p_cedula;

    RETURN v_nombre_completo;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Paciente no encontrado';
END;
/


--Funcion para Contar el Número de Intentos Fallidos de Acceso
CREATE OR REPLACE FUNCTION FIDE_FN_CONTAR_INTENTOS_FALLIDOS(
    p_usuario_id IN NUMBER
) RETURN NUMBER IS
    v_intentos NUMBER;
BEGIN
    SELECT FIDE_INTENTOS_FALLIDOS 
    INTO v_intentos
    FROM FIDE_USUARIOS_TB
    WHERE FIDE_USUARIO_ID = p_usuario_id;

    RETURN v_intentos;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;
/


--Funcion para Validar un Descuento
CREATE OR REPLACE FUNCTION FIDE_FN_VALIDAR_DESCUENTO(
    p_codigo_descuento IN VARCHAR2
) RETURN BOOLEAN IS
    v_estado VARCHAR2(20);
BEGIN
    SELECT FIDE_ESTADO 
    INTO v_estado
    FROM FIDE_DESCUENTOS_TB
    WHERE FIDE_CODIGO_DESCUENTO = p_codigo_descuento
      AND FIDE_FECHA_INICIO <= SYSTIMESTAMP 
      AND FIDE_FECHA_FIN >= SYSTIMESTAMP;

    RETURN v_estado = 'ACTIVO';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
END;
/


--Funcion para Calcular la Duracion de una Hospitalizacion
CREATE OR REPLACE FUNCTION FIDE_FN_CALCULAR_DURACION_HOSPITALIZACION(
    p_hospitalizacion_id IN NUMBER
) RETURN NUMBER IS
    v_fecha_ingreso TIMESTAMP;
    v_duracion NUMBER;
BEGIN
    SELECT FIDE_FECHA_INGRESO
    INTO v_fecha_ingreso
    FROM FIDE_HOSPITALIZACIONES_TB
    WHERE FIDE_HOSPITALIZACION_ID = p_hospitalizacion_id;

    v_duracion := TRUNC(SYSTIMESTAMP - v_fecha_ingreso);

    RETURN v_duracion;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;
/


--Funcion para calcular el Salario Total de un Empleado
CREATE OR REPLACE FUNCTION FIDE_FN_CALCULAR_SALARIO_TOTAL(
    p_empleado_id IN NUMBER
) RETURN NUMBER IS
    v_salario_por_hora NUMBER;
    v_horas_trabajadas NUMBER;
    v_salario_total NUMBER;
BEGIN
    SELECT FIDE_SALARIO_HORA, SUM(FIDE_HORAS_TRABAJADAS)
    INTO v_salario_por_hora, v_horas_trabajadas
    FROM FIDE_HORAS_TRABAJO_TB
    WHERE FIDE_EMPLEADO_ID = p_empleado_id
    GROUP BY FIDE_SALARIO_HORA;

    v_salario_total := v_salario_por_hora * v_horas_trabajadas;

    RETURN v_salario_total;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;
/


--Funcion para obtener el Estado de una Cita
CREATE OR REPLACE FUNCTION FIDE_FN_OBTENER_ESTADO_CITA(
    p_cita_id IN NUMBER
) RETURN VARCHAR2 IS
    v_estado VARCHAR2(20);
BEGIN
    SELECT FIDE_ESTADO_CITA
    INTO v_estado
    FROM FIDE_CITAS_TB
    WHERE FIDE_CITA_ID = p_cita_id;

    RETURN v_estado;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Cita no encontrada';
END;
/


--Funcion para contar el número de Pacientes con Deuda
CREATE OR REPLACE FUNCTION FIDE_FN_CONTAR_PACIENTES_CON_DEUDA RETURN NUMBER IS
    v_contador NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_contador
    FROM FIDE_PACIENTES_TB
    WHERE FIDE_DEUDA_PACIENTE > 0;

    RETURN v_contador;
END;
/


--Funcion para obtener el Tipo de Sala de un Alquiler
CREATE OR REPLACE FUNCTION FIDE_FN_OBTENER_TIPO_SALA_ALQUILER(
    p_alquiler_id IN NUMBER
) RETURN VARCHAR2 IS
    v_tipo_sala VARCHAR2(50);
BEGIN
    SELECT ts.FIDE_DESCRIPCION_TIPO_SALA
    INTO v_tipo_sala
    FROM FIDE_ALQUILERES_TB a
    JOIN FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
    JOIN FIDE_TIPOS_SALAS_TB ts ON s.FIDE_TIPO_SALA_ID = ts.FIDE_TIPO_SALA_ID
    WHERE a.FIDE_ALQUILER_ID = p_alquiler_id;

    RETURN v_tipo_sala;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Alquiler no encontrado';
END;
/


--Funcion para calcular el numero de Medicamentos Disponibles
CREATE OR REPLACE FUNCTION FIDE_FN_CONTAR_MEDICAMENTOS_DISPONIBLES 
RETURN NUMBER IS
    v_contador NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_contador
    FROM FIDE_MEDICAMENTOS_TB
    WHERE FIDE_CANTIDAD_MEDICAMENTO > 0;

    RETURN v_contador;
END;
/


--Funcion para calcular el Total de Alquileres en un rango de Fechas
CREATE OR REPLACE FUNCTION FIDE_FN_TOTAL_ALQUILERES(
    p_fecha_inicio IN TIMESTAMP,
    p_fecha_fin IN TIMESTAMP
) RETURN NUMBER IS
    v_total NUMBER;
BEGIN
    SELECT SUM(FIDE_TOTAL_ALQUILER)
    INTO v_total
    FROM FIDE_ALQUILERES_TB
    WHERE FIDE_FECHA_INICIO_ALQUILER BETWEEN p_fecha_inicio AND p_fecha_fin;

    RETURN NVL(v_total, 0);
END;
/


--Funcion para Validar un Usuario
CREATE OR REPLACE FUNCTION FIDE_FN_VALIDAR_USUARIO(
    p_usuario_id IN NUMBER
) RETURN BOOLEAN IS
    v_estado_usuario VARCHAR2(20);
BEGIN
    SELECT FIDE_ESTADO_USUARIO
    INTO v_estado_usuario
    FROM FIDE_USUARIOS_TB
    WHERE FIDE_USUARIO_ID = p_usuario_id;

    RETURN v_estado_usuario = 'ACTIVO';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;  
END;
/
-- ==============================================
-- ==============================================
-- ==============================================
-- NUEVOS CURSORES
--===============================================
-- ==============================================
-- ==============================================

--Cursor para listar todos los Empleados Activos
CREATE OR REPLACE CURSOR FIDE_CUR_EMPLEADOS_ACTIVOS IS
SELECT 
    e.FIDE_EMPLEADO_CEDULA,
    e.FIDE_NOMBRE_EMPLEADO,
    e.FIDE_APELLIDOS_EMPLEADO,
    e.FIDE_TELEFONO_EMPLEADO,
    e.FIDE_DIRECCION_EMPLEADO
FROM 
    FIDE_EMPLEADOS_TB e
WHERE 
    e.FIDE_ESTADO_EMPLEADO = 'ACTIVO';


--Cursor para listar todos los Pacientes con Deuda
CREATE OR REPLACE CURSOR FIDE_CUR_PACIENTES_CON_DEUDA IS
SELECT 
    p.FIDE_PACIENTE_CEDULA,
    p.FIDE_NOMBRE_PACIENTE,
    p.FIDE_APELLIDOS_PACIENTE,
    p.FIDE_DEUDA_PACIENTE
FROM 
    FIDE_PACIENTES_TB p
WHERE 
    p.FIDE_DEUDA_PACIENTE > 0;
    

--Cursor para listar todas las Citas Programadas
CREATE OR REPLACE CURSOR FIDE_CUR_CITAS_PROGRAMADAS IS
SELECT 
    c.FIDE_CITA_ID,
    c.FIDE_FECHA_CITA,
    p.FIDE_NOMBRE_PACIENTE,
    e.FIDE_NOMBRE_EMPLEADO
FROM 
    FIDE_CITAS_TB c
JOIN 
    FIDE_PACIENTES_TB p ON c.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
JOIN 
    FIDE_EMPLEADOS_TB e ON c.FIDE_EMPLEADO_CEDULA = e.FIDE_EMPLEADO_CEDULA;
    
    
--Cursor para obtener Medicamentos Agotados
CREATE OR REPLACE CURSOR FIDE_CUR_MEDICAMENTOS_AGOTADOS IS
SELECT 
    m.FIDE_MEDICAMENTO_ID,
    m.FIDE_NOMBRE_MEDICAMENTO,
    m.FIDE_PRECIO_MEDICAMENTO
FROM 
    FIDE_MEDICAMENTOS_TB m
WHERE 
    m.FIDE_CANTIDAD_MEDICAMENTO = 0;
    
    
--Cursor para listar los Logs de Acceso de un Usuario
CREATE OR REPLACE CURSOR FIDE_CUR_LOGS_ACCESO(
    p_usuario_id IN NUMBER
) IS
SELECT 
    la.FIDE_LOG_ID,
    la.FIDE_FECHA_ACCESO,
    la.FIDE_IP_ACCESO,
    la.FIDE_ACCION,
    la.FIDE_RESULTADO
FROM 
    FIDE_LOGS_ACCESO_TB la
WHERE 
    la.FIDE_USUARIO_ID = p_usuario_id
ORDER BY 
    la.FIDE_FECHA_ACCESO DESC;
    
    
--Cursor para listar todas las Hospitalizaciones Activas
CREATE OR REPLACE CURSOR FIDE_CUR_HOSPITALIZACIONES_ACTIVAS IS
SELECT 
    h.FIDE_HOSPITALIZACION_ID,
    p.FIDE_NOMBRE_PACIENTE,
    h.FIDE_FECHA_INGRESO,
    h.FIDE_MOTIVO_INGRESO
FROM 
    FIDE_HOSPITALIZACIONES_TB h
JOIN 
    FIDE_PACIENTES_TB p ON h.FIDE_PACIENTE_CEDULA = p.FIDE_PACIENTE_CEDULA
WHERE 
    h.FIDE_FECHA_ALTA IS NULL;


--Cursor para listar todos los Recibos por Factura
CREATE OR REPLACE CURSOR FIDE_CUR_RECIBOS_POR_FACTURA(
    p_factura_id IN NUMBER
) IS
SELECT 
    r.FIDE_RECIBO_ID,
    r.FIDE_FECHA_PAGO,
    r.FIDE_MONTO_PAGADO,
    r.FIDE_METODO_PAGO
FROM 
    FIDE_RECIBOS_TB r
WHERE 
    r.FIDE_FACTURA_ID = p_factura_id;


---Cursor para listar Descuentos Activos
CREATE OR REPLACE CURSOR FIDE_CUR_DESCUENTOS_ACTIVOS IS
SELECT 
    d.FIDE_DESCUENTO_ID,
    d.FIDE_CODIGO_DESCUENTO,
    d.FIDE_PORCENTAJE_DESCUENTO,
    d.FIDE_FECHA_INICIO,
    d.FIDE_FECHA_FIN
FROM 
    FIDE_DESCUENTOS_TB d
WHERE 
    d.FIDE_ESTADO = 'ACTIVO'
    AND d.FIDE_FECHA_INICIO <= SYSTIMESTAMP
    AND d.FIDE_FECHA_FIN >= SYSTIMESTAMP;
    
    
--Cursor para listar todos los Medicamentos Disponibles
CREATE OR REPLACE CURSOR FIDE_CUR_MEDICAMENTOS_DISPONIBLES IS
SELECT 
    m.FIDE_MEDICAMENTO_ID,
    m.FIDE_NOMBRE_MEDICAMENTO,
    m.FIDE_PRECIO_MEDICAMENTO,
    m.FIDE_CANTIDAD_MEDICAMENTO
FROM 
    FIDE_MEDICAMENTOS_TB m
WHERE 
    m.FIDE_CANTIDAD_MEDICAMENTO > 0;
    
    
--Cursor para listar todos los Alquileres Activos
CREATE OR REPLACE CURSOR FIDE_CUR_ALQUILERES_ACTIVOS IS
SELECT 
    a.FIDE_ALQUILER_ID,
    a.FIDE_DOCTOR_ALQUILER,
    a.FIDE_FECHA_INICIO_ALQUILER,
    a.FIDE_TOTAL_ALQUILER,
    s.FIDE_CAPACIDAD_SALA
FROM 
    FIDE_ALQUILERES_TB a
JOIN 
    FIDE_SALAS_TB s ON a.FIDE_SALA_ID = s.FIDE_SALA_ID
WHERE 
    a.FIDE_FECHA_FIN_ALQUILER IS NULL;  
    
    
--Cursor para listar todas las Notificaciones Pendientes
CREATE OR REPLACE CURSOR FIDE_CUR_NOTIFICACIONES_PENDIENTES IS
SELECT 
    n.FIDE_NOTIFICACION_ID,
    n.FIDE_TIPO_NOTIFICACION,
    n.FIDE_DESTINATARIO,
    n.FIDE_ASUNTO,
    n.FIDE_CUERPO
FROM 
    FIDE_NOTIFICACIONES_TB n
WHERE 
    n.FIDE_ESTADO = 'PENDIENTE';
    
    
--Cursor para listar todos los Roles
CREATE OR REPLACE CURSOR FIDE_CUR_ROLES IS
SELECT 
    r.FIDE_ROL_ID,
    r.FIDE_NOMBRE_ROL
FROM 
    FIDE_ROLES_TB r;
    
    
--Cursor para listar todos los Historiales Médicos de un Paciente
CREATE OR REPLACE CURSOR FIDE_CUR_HISTORIAL_MEDICO(
    p_cedula_paciente IN VARCHAR2
) IS
SELECT 
    hm.FIDE_HISTORIAL_ID,
    hm.FIDE_FECHA_REGISTRO,
    hm.FIDE_DIAGNOSTICO,
    hm.FIDE_TRATAMIENTO,
    hm.FIDE_OBSERVACIONES
FROM 
    FIDE_HISTORIAL_MEDICO_TB hm
WHERE 
    hm.FIDE_PACIENTE_CEDULA = p_cedula_paciente;
    
    
--Cursor para listar todas las Hospitalizaciones de un Paciente
CREATE OR REPLACE CURSOR FIDE_CUR_HOSPITALIZACIONES_PACIENTE(
    p_cedula_paciente IN VARCHAR2
) IS
SELECT 
    h.FIDE_HOSPITALIZACION_ID,
    h.FIDE_FECHA_INGRESO,
    h.FIDE_FECHA_ALTA,
    h.FIDE_MOTIVO_INGRESO,
    h.FIDE_DIAGNOSTICO_INGRESO
FROM 
    FIDE_HOSPITALIZACIONES_TB h
WHERE 
    h.FIDE_PACIENTE_CEDULA = p_cedula_paciente;
    
    
--Cursor para listar todos los Detalles de Factura de un Paciente
CREATE OR REPLACE CURSOR FIDE_CUR_DETALLES_FACTURA(
    p_factura_id IN NUMBER
) IS
SELECT 
    df.FIDE_DETALLE_FACTURA_ID,
    df.FIDE_DESCRIPCION_FACTURA,
    df.FIDE_MONTO_FACTURA
FROM 
    FIDE_DETALLES_FACTURAS_TB df
WHERE 
    df.FIDE_FACTURA_ID = p_factura_id;













